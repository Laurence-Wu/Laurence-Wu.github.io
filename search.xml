<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BuzzCar_PCBdesign</title>
      <link href="/2025/04/14/BuzzCar-PCBdesign/"/>
      <url>/2025/04/14/BuzzCar-PCBdesign/</url>
      
        <content type="html"><![CDATA[<h1><span id="designing-a-buzzcar-for-dynamic-control-algorithm-development">Designing a buzzCar for dynamic control algorithm development</span><a href="#designing-a-buzzcar-for-dynamic-control-algorithm-development" class="header-anchor">#</a></h1><div class="toc"><!-- toc --><ul><li><a href="#ideas-and-block-diagram-for-this-project">Ideas and block diagram for this project</a><ul><li><a href="#design-goals"><strong>Design Goals</strong></a></li><li><a href="#basic-requirements"><strong>Basic Requirements</strong></a></li><li><a href="#expected-features"><strong>Expected Features</strong></a></li><li><a href="#ideal-features"><strong>Ideal Features</strong></a></li><li><a href="#mechanical-design"><strong>Mechanical Design</strong></a></li><li><a href="#power-system-primary-power-2s-lipo"><strong>Power System: Primary Power: 2S LiPo</strong></a></li><li><a href="#power-system-secondary-power">Power System:  Secondary Power</a></li><li><a href="#power-system-microcontroller-integration"><strong>Power System:  Microcontroller Integration</strong></a></li><li><a href="#sensors-lidar-integration"><strong>Sensors: Lidar Integration</strong></a></li><li><a href="#sensors-voltage-monitoring"><strong>Sensors: Voltage Monitoring</strong></a></li><li><a href="#actuators-motor-control"><strong>Actuators: Motor Control</strong></a></li><li><a href="#servo-control"><strong>Servo Control</strong></a></li></ul></li><li><a href="#schematics-design">Schematics design:</a><ul><li><a href="#work-shown">Work shown</a></li><li><a href="#functionality-and-details-explained">functionality and details explained:</a></li></ul></li><li><a href="#1-battery-input-section">1. <strong>Battery Input Section</strong></a><ul><li><a href="#1-1-batt-jst-battery-connector">1.1 BATT_JST (Battery Connector)</a></li><li><a href="#1-2-battery-rail-protections">1.2 Battery Rail &amp; Protections</a></li></ul></li><li><a href="#2-battery-gauging-measurement-ltc2943-or-similar">2. <strong>Battery Gauging / Measurement (LTC2943 or Similar)</strong></a><ul><li><a href="#2-1-battery-gas-gauge-ic-u1">2.1 Battery Gas Gauge IC (U1)</a></li></ul></li><li><a href="#3-dc-dc-converter-buck-regulator">3. <strong>DC-DC Converter (Buck Regulator)</strong></a><ul><li><a href="#3-1-lm2596-lm25576-another-buck-u5">3.1 LM2596 / LM25576 / Another Buck (U5)</a></li><li><a href="#3-2-possible-3-3-v-ldo-not-always-visible-but-often-present">3.2 Possible 3.3 V LDO (Not always visible but often present)</a></li></ul></li><li><a href="#4-voltage-sensing-current-sensing">4. <strong>Voltage Sensing &amp; Current Sensing</strong></a><ul><li><a href="#4-1-voltage-sensing-v-sen">4.1 Voltage Sensing (V_SEN)</a></li><li><a href="#4-2-current-sensor-acs7xx-acs712-or-similar">4.2 Current Sensor (ACS7xx / ACS712 or Similar)</a></li></ul></li><li><a href="#5-microcontroller-mcu">5. <strong>Microcontroller (MCU)</strong></a><ul><li><a href="#5-1-main-processor-u4">5.1 Main Processor (U4)</a></li><li><a href="#5-2-programming-debug-interface">5.2 Programming / Debug Interface</a></li></ul></li><li><a href="#6-environmental-temperature-sensors">6. <strong>Environmental / Temperature Sensors</strong></a><ul><li><a href="#6-1-tsys2101-u2">6.1 TSYS2101 (U2)</a></li><li><a href="#6-2-additional-sensors-emp-thermocouples-etc">6.2 Additional Sensors (EMP, Thermocouples, etc.)</a></li></ul></li><li><a href="#7-system-i2c-configuration">7. <strong>System I²C &amp; Configuration</strong></a><ul><li><a href="#7-1-i2c-bus">7.1 I²C Bus</a></li><li><a href="#7-2-configuration-jumpers-dip-switches">7.2 Configuration Jumpers / DIP Switches</a></li></ul></li><li><a href="#8-power-paths-other-notable-blocks">8. <strong>Power Paths &amp; Other Notable Blocks</strong></a><ul><li><a href="#8-1-usb-power-if-present">8.1 USB_POWER (If Present)</a></li><li><a href="#8-2-charger-circuit-if-on-board">8.2 Charger Circuit (If On-board)</a></li><li><a href="#8-3-level-translators-or-logic-gates">8.3 Level Translators or Logic Gates</a></li></ul></li><li><a href="#9-putting-it-all-together">9. <strong>Putting It All Together</strong></a></li><li><a href="#10-summary">10. <strong>Summary</strong></a></li></ul><!-- tocstop --></div><h2><span id="ideas-and-block-diagram-for-this-project">Ideas and block diagram for this project</span><a href="#ideas-and-block-diagram-for-this-project" class="header-anchor">#</a></h2><p><img src="/images/BuzzCar_PCBdesign/blockDiagram.png" alt="Block diagram for buzzcar design" width="300" height="250"></p><h3><span id="design-goals"><strong>Design Goals</strong></span><a href="#design-goals" class="header-anchor">#</a></h3><ul><li>Create a fully integrated PCB for autonomous vehicle control</li><li>Support Arduino Nano 33 IoT, four Lidar sensors, motor controller, and power management</li><li>Ensure compatibility with existing chassis mounting points</li><li>Maintain proper clearance for wheels, suspension, and drivetrain components</li></ul><h3><span id="basic-requirements"><strong>Basic Requirements</strong></span><a href="#basic-requirements" class="header-anchor">#</a></h3><ul><li>2S LiPo battery power support</li><li>Arduino Nano 33 IoT socket</li><li>Interfaces for four TF-mini-S Lidar sensors</li><li>Hobby servo control</li><li>130-size brushed DC motor control</li><li>2-layer PCB design</li><li>Compliance with Seeed Studio DRC design rules</li></ul><h3><span id="expected-features"><strong>Expected Features</strong></span><a href="#expected-features" class="header-anchor">#</a></h3><ul><li>Battery voltage monitoring (0.05V resolution, &gt;10Hz sampling)</li><li>Alternative wired power input</li><li>Maximum dimensions: 100mm × 100mm</li></ul><h3><span id="ideal-features"><strong>Ideal Features</strong></span><a href="#ideal-features" class="header-anchor">#</a></h3><ul><li>Balanced battery charging capability</li><li>Designed using Fusion 360/Eagle PCB</li><li>Prototype area for future expansion</li></ul><h3><span id="mechanical-design"><strong>Mechanical Design</strong></span><a href="#mechanical-design" class="header-anchor">#</a></h3><ul><li>Replaces carbon fiber top deck of Atomic AMZ RC chassis</li><li>Maximum dimensions: 100mm × 100mm</li><li>Must maintain clearance for wheel steering and suspension travel</li><li>Reference previous PCB design file or direct chassis measurements</li></ul><h3><span id="power-system-primary-power-2s-lipo"><strong>Power System: Primary Power: 2S LiPo</strong></span><a href="#power-system-primary-power-2s-lipo" class="header-anchor">#</a></h3><ul><li>Battery specifications: 300-1000mAh, 6.5-8.4V operating range</li><li>Connector: JST-PH 3-pin 2mm (specified polarity required)</li><li>Voltage monitoring circuit with 0.05V resolution, &gt;10Hz sampling</li><li>Data accessibility via Analog GPIO or SPI (avoid I2C)</li></ul><h3><span id="power-system-secondary-power">Power System:  Secondary Power</span><a href="#power-system-secondary-power" class="header-anchor">#</a></h3><ul><li>DC input for extended operation/debugging</li><li>Hot-swappable between battery and DC input</li><li>Battery charging while connected to DC power</li><li>Status indicator LED preferred</li></ul><h3><span id="power-system-microcontroller-integration"><strong>Power System:  Microcontroller Integration</strong></span><a href="#power-system-microcontroller-integration" class="header-anchor">#</a></h3><ul><li>Socket for Arduino Nano 33 IoT</li><li>Direct battery power connection possible via Arduino’s internal LDO</li><li>Alternative 3.3V power option</li><li>Required I/O routing for sensors and actuators</li><li>3.3V TTL logic level (NOT 5V tolerant)</li><li>EMI considerations for u-blox WiFi chip proximity</li></ul><h3><span id="sensors-lidar-integration"><strong>Sensors:  Lidar Integration</strong></span><a href="#sensors-lidar-integration" class="header-anchor">#</a></h3><ul><li>Four Benewake TF-Mini S Lidar modules</li><li>Mounting positions: front, back, left, right</li><li>Power requirements: 5V, 200mA peak per sensor</li><li>Connector: JST-GH1.25-4P</li><li>Shared I2C communication bus</li><li>Mounting brackets/holes for sensor installation</li></ul><h3><span id="sensors-voltage-monitoring"><strong>Sensors: Voltage Monitoring</strong></span><a href="#sensors-voltage-monitoring" class="header-anchor">#</a></h3><ul><li>Battery voltage sensing circuit</li><li>Optional current sensing for motor control</li></ul><h3><span id="actuators-motor-control"><strong>Actuators: Motor Control</strong></span><a href="#actuators-motor-control" class="header-anchor">#</a></h3><ul><li>TB67H451FNG motor driver IC</li><li>3A current limit for 130-size brushed motor</li><li>Current limiting via RS pin and sensing resistor</li><li>Arduino connections:<ul><li>IN1: D5 (D_PWM_FWD)</li><li>IN2: D6 (D_PWM_REV)</li></ul></li><li>Motor output pads capable of 3A current</li></ul><h3><span id="servo-control"><strong>Servo Control</strong></span><a href="#servo-control" class="header-anchor">#</a></h3><ul><li>Micro hobby servo support</li><li>JST-ZH 1.5mm 3-pin connector</li><li>Signal connection to Arduino D9</li><li>Direct battery voltage for servo power</li></ul><h2><span id="schematics-design">Schematics design:</span><a href="#schematics-design" class="header-anchor">#</a></h2><h3><span id="work-shown">Work shown</span><a href="#work-shown" class="header-anchor">#</a></h3><p><img src="/images/BuzzCar_PCBdesign/DesignSchematics.png" alt="PCB schematics" width="1200" height="600"></p><h3><span id="functionality-and-details-explained">functionality and details explained:</span><a href="#functionality-and-details-explained" class="header-anchor">#</a></h3><h2><span id="1-battery-input-section">1. <strong>Battery Input Section</strong></span><a href="#1-battery-input-section" class="header-anchor">#</a></h2><h3><span id="1-1-batt-jst-battery-connector">1.1 BATT_JST (Battery Connector)</span><a href="#1-1-batt-jst-battery-connector" class="header-anchor">#</a></h3><ul><li><strong>What it is</strong>: A JST (or similar) connector where a single-cell Li-ion or LiPo battery is plugged in.</li><li><strong>Function</strong>: Provides the main power source for the entire board. The battery voltage might range roughly from 3.0–4.2 V (typical for a single Li-ion cell) or another range if configured differently.</li></ul><h3><span id="1-2-battery-rail-amp-protections">1.2 Battery Rail &amp; Protections</span><a href="#1-2-battery-rail-amp-protections" class="header-anchor">#</a></h3><ul><li><strong>BATT_RAIL</strong>: The net label that refers to the raw battery voltage.</li><li><strong>MOSFET / Ideal Diode / Protection</strong> (if present): Often, a P-channel MOSFET or an ideal-diode controller (like certain Linear Technology “LTC” parts) is added to protect from reverse polarity or to control current flow.</li><li><strong>Sense Resistor (R_SENSE)</strong>: A small-value resistor in series with the battery rail so that current can be measured. This is used by the coulomb-counter IC or by a dedicated current sensor.</li></ul><hr><h2><span id="2-battery-gauging-measurement-ltc2943-or-similar">2. <strong>Battery Gauging / Measurement (LTC2943 or Similar)</strong></span><a href="#2-battery-gauging-measurement-ltc2943-or-similar" class="header-anchor">#</a></h2><h3><span id="2-1-battery-gas-gauge-ic-u1">2.1 Battery Gas Gauge IC (U1)</span><a href="#2-1-battery-gas-gauge-ic-u1" class="header-anchor">#</a></h3><ul><li><strong>Likely Part</strong>: LTC2943 (part label suggests something like LTC2943MBTRPBF).</li><li><strong>Function</strong>:<ol><li><strong>Voltage Measurement</strong>: Monitors the battery voltage through an internal ADC.</li><li><strong>Current Measurement</strong>: Measures voltage drop across the sense resistor (R_SENSE) to calculate current in/out of the battery.</li><li><strong>Coulomb Counting</strong>: Integrates current over time to keep track of battery charge/discharge.</li><li><strong>I²C Interface</strong>: Communicates measurements to the microcontroller.</li></ol></li><li><strong>How it fits in</strong>: The LTC2943 is powered by the battery line itself, and its SCL/SDA pins connect to the MCU’s I²C bus. Any measured data about battery capacity, voltage, and current is periodically read by the main microcontroller.</li></ul><hr><h2><span id="3-dc-dc-converter-buck-regulator">3. <strong>DC-DC Converter (Buck Regulator)</strong></span><a href="#3-dc-dc-converter-buck-regulator" class="header-anchor">#</a></h2><h3><span id="3-1-lm2596-lm25576-another-buck-u5">3.1 LM2596 / LM25576 / Another Buck (U5)</span><a href="#3-1-lm2596-lm25576-another-buck-u5" class="header-anchor">#</a></h3><ul><li><strong>What it is</strong>: A switching regulator that steps the battery voltage (which varies with battery level) down to a stable 5 V or another regulated rail.</li><li><strong>Function</strong>:<ol><li><strong>High-Efficiency Power</strong>: Switching regulators waste less power compared to a linear regulator, crucial for battery operation.</li><li><strong>Provides 5 V</strong>: Needed if certain parts on the board (sensors, display drivers, or external modules) require 5 V.</li></ol></li><li><strong>Key Connections</strong>:<ul><li><strong>Input</strong>: BATT_RAIL (or “VIN” from battery)</li><li><strong>Output</strong>: 5 V supply net (often labeled “5V_BUCK” or “+5V”)</li><li><strong>Feedback Resistive Divider</strong>: Sets the output voltage.</li></ul></li></ul><h3><span id="3-2-possible-3-3-v-ldo-not-always-visible-but-often-present">3.2 Possible 3.3 V LDO (Not always visible but often present)</span><a href="#3-2-possible-3-3-v-ldo-not-always-visible-but-often-present" class="header-anchor">#</a></h3><ul><li>If any 3.3 V logic devices are on the board, you might see a linear regulator (e.g., an AMS1117-3.3 or an LP2985) taking the 5 V output from the buck regulator down to 3.3 V. This is typical in designs that must supply both 3.3 V and 5 V components.</li></ul><hr><h2><span id="4-voltage-sensing-amp-current-sensing">4. <strong>Voltage Sensing &amp; Current Sensing</strong></span><a href="#4-voltage-sensing-amp-current-sensing" class="header-anchor">#</a></h2><h3><span id="4-1-voltage-sensing-v-sen">4.1 Voltage Sensing (V_SEN)</span><a href="#4-1-voltage-sensing-v-sen" class="header-anchor">#</a></h3><ul><li><strong>What it is</strong>: A voltage divider feeding into an ADC input of the microcontroller.</li><li><strong>Function</strong>: Allows the MCU to measure the raw battery voltage directly (or the 5 V rail) by scaling it down to a safe ADC range.</li><li><strong>Why needed</strong>:<ol><li><strong>Monitor Battery Level</strong>: The MCU can perform battery level checks.</li><li><strong>Monitor 5 V</strong>: Verify the buck regulator is functioning properly.</li></ol></li></ul><h3><span id="4-2-current-sensor-acs7xx-acs712-or-similar">4.2 Current Sensor (ACS7xx / ACS712 or Similar)</span><a href="#4-2-current-sensor-acs7xx-acs712-or-similar" class="header-anchor">#</a></h3><ul><li><strong>What it is</strong>: A Hall effect-based current sensor module (e.g., ACS712 or ACS75x).</li><li><strong>Function</strong>: Measures current flowing through its internal conductor, producing an analog voltage proportional to the current.</li><li><strong>Connection</strong>:<ol><li><strong>In series with the load</strong>: The battery rail or 5 V supply passes through it.</li><li><strong>Output</strong>: Analog voltage to an MCU ADC pin labeled something like “I_SEN.”</li></ol></li><li><strong>Why needed</strong>:<ul><li>Additional load current monitoring separate from the battery coulomb counter.</li><li>Or to measure consumption of different subcircuits if the LTC2943 is measuring only the battery as a whole.</li></ul></li></ul><hr><h2><span id="5-microcontroller-mcu">5. <strong>Microcontroller (MCU)</strong></span><a href="#5-microcontroller-mcu" class="header-anchor">#</a></h2><h3><span id="5-1-main-processor-u4">5.1 Main Processor (U4)</span><a href="#5-1-main-processor-u4" class="header-anchor">#</a></h3><ul><li><strong>Possible Part</strong>: An ARM Cortex-M0/M4 (e.g., ATSAMD21), an ESP-type chip, or another micro with an I²C bus. The schematic pin labels (PBxx, SWDCLK, SWDIO, BOOT, EN, etc.) suggest an ARM-based microcontroller with SWD programming.</li><li><strong>Function</strong>:<ol><li><strong>Reads Sensor Data</strong>: Collects battery parameters from the LTC2943 via I²C, current data from ACS7xx, temperature data from the TSYS2101, etc.</li><li><strong>Controls the System</strong>: Can enable/disable power rails, manage low-power states, and communicate via serial or USB.</li><li><strong>Firmware Logic</strong>: Runs any user application, logging data, controlling outputs, etc.</li></ol></li></ul><h3><span id="5-2-programming-debug-interface">5.2 Programming / Debug Interface</span><a href="#5-2-programming-debug-interface" class="header-anchor">#</a></h3><ul><li><strong>SWD / JTAG Header</strong>: For programming and debugging the MCU firmware.</li><li><strong>Boot/Reset Circuits</strong>: May include pushbuttons or jumpers to place the MCU into bootloader mode.</li></ul><hr><h2><span id="6-environmental-temperature-sensors">6. <strong>Environmental / Temperature Sensors</strong></span><a href="#6-environmental-temperature-sensors" class="header-anchor">#</a></h2><h3><span id="6-1-tsys2101-u2">6.1 TSYS2101 (U2)</span><a href="#6-1-tsys2101-u2" class="header-anchor">#</a></h3><ul><li><strong>What it is</strong>: A high-precision temperature sensor from TE Connectivity, typically with an I²C interface.</li><li><strong>Function</strong>: Continuously reads the ambient temperature; the MCU polls it via I²C.</li><li><strong>Why it’s used</strong>: Good for accurate temperature measurements if the application needs precise sensing (e.g., data logging, environmental monitoring).</li></ul><h3><span id="6-2-additional-sensors-emp-thermocouples-etc">6.2 Additional Sensors (EMP, Thermocouples, etc.)</span><a href="#6-2-additional-sensors-emp-thermocouples-etc" class="header-anchor">#</a></h3><ul><li><strong>EMP or “SM304X05-P6”</strong>: Could be another sensor or sensor amplifier for temperature/humidity/pressure.</li><li><strong>Thermocouple or Thermistor</strong>: If present, the schematic might show an amplifier or ADC front end.</li><li><strong>DIP Switches S2–S5</strong>: Sometimes used to configure which sensors are active or to set I²C addresses or other configuration bits.</li></ul><hr><h2><span id="7-system-i2c-amp-configuration">7. <strong>System I²C &amp; Configuration</strong></span><a href="#7-system-i2c-amp-configuration" class="header-anchor">#</a></h2><h3><span id="7-1-i2c-bus">7.1 I²C Bus</span><a href="#7-1-i2c-bus" class="header-anchor">#</a></h3><ul><li><strong>SCL, SDA</strong>: Shared among the gas gauge (LTC2943), the temperature sensor (TSYS2101), and potentially other sensors.</li><li><strong>Pull-up Resistors</strong>: Typically you will see 4.7 kΩ or 10 kΩ pull-ups to 3.3 V or 5 V (depending on logic level).</li></ul><h3><span id="7-2-configuration-jumpers-dip-switches">7.2 Configuration Jumpers / DIP Switches</span><a href="#7-2-configuration-jumpers-dip-switches" class="header-anchor">#</a></h3><ul><li><strong>What they are</strong>: Solder jumpers (SJx) or DIP switches (Sx) that let you route signals or change addresses.</li><li><strong>Function</strong>:<ol><li><strong>Enable/Disable Features</strong>: For example, to cut power to a sensor or to bypass the battery monitor.</li><li><strong>Select I²C Address</strong>: For devices that offer multiple address pins.</li><li><strong>Boot Mode Configuration</strong>: Possibly used for microcontroller bootloader settings.</li></ol></li></ul><hr><h2><span id="8-power-paths-amp-other-notable-blocks">8. <strong>Power Paths &amp; Other Notable Blocks</strong></span><a href="#8-power-paths-amp-other-notable-blocks" class="header-anchor">#</a></h2><h3><span id="8-1-usb-power-if-present">8.1 USB_POWER (If Present)</span><a href="#8-1-usb-power-if-present" class="header-anchor">#</a></h3><ul><li>Some boards also allow USB input. If so, you may see a diode or power multiplexer that automatically switches from USB 5 V to battery if USB is unplugged.</li><li>The schematic might show a USB connector (Micro-USB/Type-C) with data lines going to the MCU for serial communication or programming.</li></ul><h3><span id="8-2-charger-circuit-if-on-board">8.2 Charger Circuit (If On-board)</span><a href="#8-2-charger-circuit-if-on-board" class="header-anchor">#</a></h3><ul><li>If the design includes a dedicated Li-ion charger IC (e.g., MCP73831, BQ24075, etc.), you would see it interfacing between the USB 5 V and the battery connector.</li><li>If the design expects an external charger, you won’t see these blocks, and the battery rail is used directly.</li></ul><h3><span id="8-3-level-translators-or-logic-gates">8.3 Level Translators or Logic Gates</span><a href="#8-3-level-translators-or-logic-gates" class="header-anchor">#</a></h3><ul><li>If any 5 V signals must interface with a 3.3 V MCU, there may be level shifters or FET-based translators.</li></ul><hr><h2><span id="9-putting-it-all-together">9. <strong>Putting It All Together</strong></span><a href="#9-putting-it-all-together" class="header-anchor">#</a></h2><ol><li><strong>Power Flow</strong>:<ul><li>The Li-ion battery plugs in at <strong>BATT_JST</strong>.</li><li>The raw battery voltage is fed into:<ul><li><strong>LTC2943</strong> (gas gauge) to measure battery stats.</li><li><strong>Buck Converter</strong> (LM2596 or similar) to generate 5 V for the rest of the board.</li></ul></li><li>A secondary regulator (if present) generates 3.3 V from 5 V for the MCU and sensors.</li></ul></li><li><strong>Measurement &amp; Control</strong>:<ul><li>The <strong>LTC2943</strong> monitors voltage/current on the battery rail and sends data to the MCU over I²C.</li><li>The <strong>ACS7xx</strong> (if present) measures load current or an additional current path for more granular control.</li><li>The <strong>TSYS2101</strong> (and/or other sensors) measure environmental parameters.</li><li>The <strong>MCU</strong> reads all sensor values and can make decisions (e.g., low-battery cutoff, data logging, etc.).</li></ul></li><li><strong>User / System Interface</strong>:<ul><li>The <strong>DIP switches</strong> or <strong>jumpers</strong> let you enable/disable certain circuits or configure addresses.</li><li>The <strong>SWD</strong> header (or similar) is used to program or debug the MCU.</li></ul></li><li><strong>Overall Purpose</strong>:<ul><li>A battery-powered system that needs to monitor its own power usage (both voltage and current) and track battery health (via coulomb counting).</li><li>Likely used in an application where accurate battery life predictions and environmental data are important (e.g., remote sensors, IoT, or data loggers).</li></ul></li></ol><hr><h2><span id="10-summary">10. <strong>Summary</strong></span><a href="#10-summary" class="header-anchor">#</a></h2><ul><li><strong>Battery Connector &amp; Gas Gauge</strong>: The battery is connected to the JST port. The LTC2943 tracks voltage, current, and calculates remaining charge (coulomb counting).</li><li><strong>Buck Converter</strong>: Steps the raw battery voltage to 5 V for powering sensors, the microcontroller, or other subsystems.</li><li><strong>Current Sensor</strong>: A Hall effect-based device (e.g., ACS712) measures current flowing to or from a particular circuit branch, giving the MCU another read on power usage.</li><li><strong>Microcontroller</strong>: Serves as the brain—collecting sensor data, controlling power states, possibly communicating over USB or wireless.</li><li><strong>Sensors</strong>: A variety of temperature or environmental sensors (e.g., TSYS2101) gather external data.</li><li><strong>Configuration &amp; Debug</strong>: DIP switches, solder jumpers, and SWD programming headers let developers set up, tune, or troubleshoot the device.</li></ul><p>This arrangement makes for a robust battery-powered design: it has intelligent battery monitoring (gas gauging), regulated power rails, multiple sensor inputs, and a programmable microcontroller that can make decisions or log data as needed.</p>]]></content>
      
      
      <categories>
          
          <category> electrical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCB design </tag>
            
            <tag> layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Sorting</title>
      <link href="/2025/04/07/Introduction-to-Sorting/"/>
      <url>/2025/04/07/Introduction-to-Sorting/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#insertion-sort">Insertion sort</a><ul><li><a href="#cocktail-shaker-sort">Cocktail Shaker Sort</a></li><li><a href="#mergesort">MergeSort</a></li><li><a href="#quicksort">QuickSort</a></li><li><a href="#lsd-radix-sort">LSD Radix Sort</a></li><li><a href="#open-address-hashmap">Open address Hashmap</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="insertion-sort">Insertion sort</span><a href="#insertion-sort" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-comment">// Move an element at `j` backward into the correct descending position</span><br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; array[j] &gt; array[j - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-comment">//swap</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[j];<br>            array[j] = array[j - <span class="hljs-number">1</span>];<br>            array[j - <span class="hljs-number">1</span>] = temp;<br>            j--; <span class="hljs-comment">// Decrement to check previous elements</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PS: Use the conditional loop to simplify the loop.</p><h1><span id="cocktail-shaker-sort">Cocktail Shaker Sort</span><a href="#cocktail-shaker-sort" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cocktailSharkerSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>  <span class="hljs-comment">// this method makes the array sorted in the decending</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">endIndex</span> <span class="hljs-operator">=</span> array.length - <span class="hljs-number">1</span>; <br>  <span class="hljs-keyword">while</span>(startIndex &lt; endIndex)&#123;<br>    <span class="hljs-comment">//Forwards</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastSwappedIndex</span> <span class="hljs-operator">=</span> startIndex;<br>    <span class="hljs-comment">//for Loop one</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; endIndex; i++ )&#123;<br>      <span class="hljs-keyword">if</span>(array[i] &lt; array[i + <span class="hljs-number">1</span>])&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>        array[i] = array[i + <span class="hljs-number">1</span>];<br>        array[i + <span class="hljs-number">1</span>] = temp;<br>        lastSwappedIndex = i; <span class="hljs-comment">// this index shouldn&#x27;t be i + 1</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>    endIndex = lastSwappedIndex;<br>    <span class="hljs-comment">// if the array is sorted right now, we break the loop.</span><br>    <span class="hljs-keyword">if</span>(lastSwappedIndex == startIndex)&#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Backwards</span><br>    lastSwappedIndex = endIndex;<br>    <span class="hljs-comment">//for loop two</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> endIndex; i&gt; start;i--)&#123;<br>      <span class="hljs-keyword">if</span>(array[i - <span class="hljs-number">1</span>] &lt; array[i])&#123;<br>        lastSwappedIndex = i; <span class="hljs-comment">// this index shouldn&#x27;t be i - 1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>        array[i] = array[i - <span class="hljs-number">1</span>];<br>        array[i - <span class="hljs-number">1</span>] = temp;<br>      &#125;<br>    &#125;<br>    startIndex = lastSwappedIndex;<br>    <span class="hljs-keyword">if</span>(lastSwappedIndex == endIndex)&#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>The thing worth the attention in the cocktail shaker method is:</p><ul><li>The lastSwappedIndex should only be set to <strong>i</strong> each time. Because the swapped one is the one we are sure to be in the correct position.</li><li>Compare after each loop and set the startIndex/endIndex ~!</li></ul><h1><span id="mergesort">MergeSort</span><a href="#mergesort" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>  <span class="hljs-keyword">if</span>(array.length == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//ending condition of the recursion</span><br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// seperate the current array to left and right</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> array.length / <span class="hljs-number">2</span>;<br>  <span class="hljs-type">int</span>[] left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[mid];<br>  <span class="hljs-type">int</span>[] right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array.length - mid];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mid; i++)&#123;<br>    left[i] = array[i];<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid; j&lt; array.length ; j++)&#123;<br>    right[j - mid] = array[j];<br>  &#125;<br>  mergeSort(left);<br>  mergeSort(right);<br>  <br>  <span class="hljs-type">int</span> <span class="hljs-variable">leftIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">rightIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">overallIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//this is the index of the current array</span><br><span class="hljs-comment">// use the length as the bound condition</span><br>  <span class="hljs-keyword">while</span>(leftIndex &lt; left.length &amp;&amp; rightIndex &lt; right.length)&#123;<br>    <span class="hljs-comment">// the condition has to include the &lt;=, or it won&#x27;t work.</span><br>    <span class="hljs-keyword">if</span>(left[leftIndex] &lt;= right[rightIndex])&#123;<br>      array[overallIndex++] = left[leftIndex ++];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      array[overallIndex++] = right[rightIndex ++];<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">while</span>(leftIndex &lt; left.length)&#123;<br>    array[overallIndex ++] = left[leftIndex ++];<br>  &#125;<br>  <span class="hljs-keyword">while</span>(rightIndex &lt; right.length)&#123;<br>    array[overallIndex ++] = right[rightIndex ++];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>A thing worth noting is that this sorting uses a lot of time generating left and right array. This is worth it since you have t</li></ol><h1><span id="quicksort">QuickSort</span><a href="#quicksort" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> endIndex)</span> &#123;<br>    <span class="hljs-keyword">if</span> (startIndex &gt;= endIndex) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Base case</span><br><br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pivotIndex</span> <span class="hljs-operator">=</span> rand.nextInt(endIndex - startIndex + <span class="hljs-number">1</span>) + startIndex;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> array[pivotIndex];<br><br>    <span class="hljs-comment">// Swap pivot to start</span><br>    swap(array, startIndex, pivotIndex);<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> endIndex;<br><br>  <span class="hljs-comment">// this while loop ensures that the order arround the pivot is correct.</span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>        <span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; array[i] &lt;= pivot) i++; <span class="hljs-comment">//if is already smaller, we move forward</span><br>        <span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; array[j] &gt; pivot) j--;<span class="hljs-comment">// if is bigger, we move forward</span><br>        <span class="hljs-keyword">if</span> (i &lt;= j) &#123;<span class="hljs-comment">// if is in the wrong order according to the pivot, then we change their position.</span><br>            swap(array, i, j);<br>            i++;<br>            j--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Place pivot in correct position (at j)</span><br>    swap(array, startIndex, j);<br><br>    <span class="hljs-comment">// Recursive calls with updated indices</span><br>    quickSort(array, startIndex, j - <span class="hljs-number">1</span>);<br>    quickSort(array, j + <span class="hljs-number">1</span>, endIndex);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>    array[i] = array[j];<br>    array[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>Why do we need recursion here? Why can’t we just use a for-loop and traverse everything?</p><p>Essentailly we need to sort the two seperate list on both left and right, for code simplicity, the best strategy is to use recursion.</p></li><li><p>Why do we need the pivotIndex to be randomly generated? </p><p>Because random number allow the existence of a relatively big left and right array, so that it would promote the advantage of using two pointer(i,j)</p></li></ol><h1><span id="lsd-radix-sort">LSD Radix Sort</span><a href="#lsd-radix-sort" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">LSDRadixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>    <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// Initialize 10 buckets for digits 0-9.</span><br>    <span class="hljs-comment">// The real algorithm has 19 buckets which implement 19 bucket accounting for the negatice numbers.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RADIX</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    Queue&lt;Integer&gt;[] buckets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>[RADIX];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; RADIX; i++) &#123;<br>        buckets[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-comment">// Find the maximum number to determine the number of passes (digits)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : array) &#123;<br>        <span class="hljs-keyword">if</span> (num &gt; max) max = num;<br>    &#125;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">maxDigit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(max &gt; <span class="hljs-number">0</span>)&#123;<br>      max /= <span class="hljs-number">10</span>;<br>      maxDigit ++;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">digitIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; digitIndex &lt; k; digitIndex++) &#123;<br>        <span class="hljs-comment">// Distribute elements into buckets based on the current digit</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : array) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">divisor</span> <span class="hljs-operator">=</span> base / <span class="hljs-number">10</span>; <span class="hljs-comment">// Isolate the current digit (LSD first)</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">digit</span> <span class="hljs-operator">=</span> (num / divisor) % <span class="hljs-number">10</span>;<br>            buckets[digit].add(num); <span class="hljs-comment">// Add to the corresponding bucket</span><br>        &#125;<br><br>        <span class="hljs-comment">// Collect elements back into the array in order (0-9)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Queue&lt;Integer&gt; bucket : buckets) &#123;<br>            <span class="hljs-keyword">while</span> (!bucket.isEmpty()) &#123;<br>                array[index++] = bucket.poll();<br>                <span class="hljs-comment">// In the stack way for in-place sorting</span><br>            &#125;<br>        &#125;<br><br>        base *= <span class="hljs-number">10</span>; <span class="hljs-comment">// Move to the next digit (e.g., 10 → 100)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>Why do we need 19 buckets?</p><p>From -9 to +9, though, we don’t care about the negative part in this implementation.</p></li><li><p>Why do we need the stack implementation for each bucket?</p><p>This is because we want an in-place implementation.</p></li></ol><h1><span id="open-address-hashmap">Open address Hashmap</span><a href="#open-address-hashmap" class="header-anchor">#</a></h1><p>Probably the hardest method to implement in the open address hashmap is <strong>put</strong> method. We just going to implement this method simply. Also, we are not digging into the complex theory of choosing the correct hash function, so our hash function is just .hashcode % array.length.</p><p>Function overall organization:</p><p>whileLoop</p><ul><li>Same key condition<ul><li>isRemoved : set firstRemoved</li><li>replace the current value</li></ul></li><li>Process that each loop has to experience<ul><li>! isRemoved: noInfinite ++</li><li>isRemoved: set firstRemoved</li></ul></li></ul><p>endWhile</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">MAX_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.67</span>;<br>    <span class="hljs-keyword">private</span> LinearProbingMapEntry&lt;K, V&gt;[] table;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(K key, V value)</span>&#123;<br>  <span class="hljs-comment">//if the load factor is greater than the MAX_LOAD_FACTOR, then expand the list</span><br>  <span class="hljs-keyword">if</span>((<span class="hljs-type">double</span>)(size/table.length &gt; MAX_LOAD_FACTOR)&#123;<br>    resize(table.length * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> Math.abs(key.hashcode() % table.length);<br>  <span class="hljs-type">int</span> <span class="hljs-variable">firstRemoved</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">noInfinite</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// to limit the loop to go for ever.</span><br>  <span class="hljs-keyword">while</span>(table[hash] != <span class="hljs-literal">null</span> &amp;&amp; noInfinite &lt; size)&#123;<br>    <span class="hljs-keyword">if</span>(table[hash].equals(key))&#123;<br>      <span class="hljs-keyword">if</span>(!isRemoved())&#123;<br>        <span class="hljs-comment">// we got it</span><br>        <span class="hljs-type">V</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> table[hash].getValue();<br>        table[hash].setValue(value);<br>        <span class="hljs-keyword">return</span> returnValue;<br>      &#125;<br>      <br>    &#125;<br>    <span class="hljs-keyword">if</span>(!table[hash].isRemoved())&#123;<br>      <span class="hljs-comment">//this is a real element and </span><br>      <span class="hljs-comment">//we need to check whether we have an infinite loop with noInfinite.</span><br>      noInfinite ++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// we found the first removed place</span><br>        <span class="hljs-comment">// but wait, we don&#x27;t want duplicate key in the list,</span><br>        <span class="hljs-comment">// so we only record the first Removed position.</span><br>      <span class="hljs-keyword">if</span>(firstRemoved == -<span class="hljs-number">1</span>)&#123;<br>        fisrtRemoved = hash;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// increase the hash;</span><br>    hash = (hash + <span class="hljs-number">1</span>)%table.length;<br>  &#125;<br>  <span class="hljs-comment">//out of the loop</span><br> <span class="hljs-comment">// make the final judgement.</span><br>  <span class="hljs-keyword">if</span> (firstRemoved != -<span class="hljs-number">1</span>) &#123;<br>      table[firstRemoved] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearProbingMapEntry</span>&lt;&gt;(key, value);<br>      ++size;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  table[hash] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearProbingMapEntry</span>&lt;&gt;(key, value);<br>  ++size;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> sorting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Memory Model for C</title>
      <link href="/2025/04/07/Introduction-to-C/"/>
      <url>/2025/04/07/Introduction-to-C/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#different-sections-in-the-memory">Different sections in the Memory</a><ul><li><a href="#overview-of-the-memory-model">Overview of the memory model</a></li><li><a href="#stack-implementations">Stack Implementations</a><ul><li><a href="#activation-frame-layout">Activation Frame Layout</a></li><li><a href="#detailed-process-for-calling-a-function">Detailed process for calling a function:</a></li></ul></li><li><a href="#heap-implementations">Heap Implementations</a><ul><li><a href="#basic-heap-interfaces-dynamics-allocation">Basic Heap Interfaces: dynamics allocation:</a></li><li><a href="#general-memory-allocation-process">General Memory Allocation Process</a></li><li><a href="#heap-allocation-pollicies">Heap allocation Pollicies</a></li></ul></li><li><a href="#statics-memory">Statics memory</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="different-sections-in-the-memory">Different sections in the Memory</span><a href="#different-sections-in-the-memory" class="header-anchor">#</a></h1><h2><span id="overview-of-the-memory-model">Overview of the memory model</span><a href="#overview-of-the-memory-model" class="header-anchor">#</a></h2><pre class="mermaid">graph TD    classDef pointer fill:#f9d,stroke:#333;    %% Main Vertical Structure    MemoryModel["Memory Model"] --> Stack    MemoryModel --> Heap    MemoryModel --> Static    %% Stack Section    subgraph Stack["Stack - Function Activation Frames"]        Frame1["Frame 1: main()"] --> Frame2["Frame 2: funcA()"]        Frame2 --> Frame3["Frame 3: funcB()"]        Frame3 -. "Pop on return" .-> Frame2        StackPointer:::pointer -.-> HeapObj1    end    %% Heap Section    subgraph Heap["Heap - Dynamic Memory"]        HeapObj1[["Object A"]] --> HeapObj2[["Object B"]]    end    %% Static/Global Section    subgraph Static["Static/Global Memory"]        GlobalVar["Global Variables"] --> StaticVar["Static Variables"]        StaticPointer:::pointer -.-> HeapObj2    end    class StackPointer,StaticPointer pointer;</pre><h2><span id="stack-implementations">Stack Implementations</span><a href="#stack-implementations" class="header-anchor">#</a></h2><p>This stack is only the memory allocation executed by the instructions.</p><h3><span id="activation-frame-layout">Activation Frame Layout</span><a href="#activation-frame-layout" class="header-anchor">#</a></h3><ol><li><p>The basic type of memories:</p><ol><li><strong>Frame pointer</strong>: the frame pointer is the previous stack pointer.</li><li><strong>Stack pointer</strong>: the lowest address in the stack (the top of the stack).</li><li><strong>Return address</strong>: the pointer pointing to the memory where the return value is stored.</li><li><strong>Return value</strong>: the value of the function return,  pre-allocated in the previous activation frame.</li></ol></li><li><p>Activation Frame introduction:</p><ol><li><p>Why do we need it: as a simplified word to deliver the <strong>general</strong> process of function calling in the memory.</p></li><li><p>When we detect a function call (function_next) in a function(function_prev), we do the activation frame:</p><ol><li><p><strong>Bookkeeping</strong>( keep the RA/FP of the previous function)</p></li><li><p><strong>Input</strong> (the input variable the function_next need)</p></li><li><p><strong>Output</strong>( preallocate the return value of the function_next)</p></li><li><p><strong>Locals</strong>(allocate the locals of the function)</p></li></ol></li></ol></li></ol><h3><span id="detailed-process-for-calling-a-function">Detailed process for calling a function:</span><a href="#detailed-process-for-calling-a-function" class="header-anchor">#</a></h3><p>During a main process execution, several steps occur sequentially:</p><ol><li>First, the Frame Pointer (FP) is set to establish the current stack frame’s reference point</li><li>Local variables are allocated and initialized in the stack memory</li><li>Important registers like the Return Address (RA) and Frame Pointer (FP) are preserved - this is called “bookkeeping”</li><li>Space for return values (RV) is allocated</li><li>Function parameters (inputs) are pushed onto the stack</li><li>The program jumps to a function (like “foo”) using the “jal ra, foo” instruction</li></ol><p>When the called function (“foo”) executes, it follows a similar procedure:</p><ol><li>It sets its own Frame Pointer (FP) at the current stack position</li><li>Adjusts the Stack Pointer (SP) which allocates space for its local variables</li><li>Executes its body code</li><li>Saves any return values to the previously saved slot.</li><li>Pops its locals from the stack when finished</li><li>Returns control to the calling function using “jalr x0, ra, 0”</li></ol><p>Upon return to the main process, the original function:</p><ol><li>Restores its bookkeeping information (RA, FP)</li><li>Uses the return value (RV) as needed</li><li>Pops any remaining locals from the function call</li><li>Continues its execution</li></ol><h2><span id="heap-implementations">Heap Implementations</span><a href="#heap-implementations" class="header-anchor">#</a></h2><h3><span id="basic-heap-interfaces-dynamics-allocation">Basic Heap Interfaces: dynamics allocation:</span><a href="#basic-heap-interfaces-dynamics-allocation" class="header-anchor">#</a></h3><p>Heap handles the malloc and frees in the memory</p><ul><li>malloc(size_in_bytes), return a void pointer, and this is why you have to specify the type of the pointer every time you allocate.</li><li>free(ptr): deallocate the block pointed to by Ptr</li></ul><h3><span id="general-memory-allocation-process">General Memory Allocation Process</span><a href="#general-memory-allocation-process" class="header-anchor">#</a></h3><ol><li><p>Request Phase<br>When a program needs memory, it makes an explicit request using functions like malloc in C or the new operator in languages like Java or C++. The program specifies how much memory it needs.</p></li><li><p>Block Location<br>The heap manager searches for a suitable memory location:<br>(This is where the heap memory policies are applied, for more information check the Heap allocation Poll)</p></li></ol><ol><li>Allocation Execution<br>Once a suitable location is found:</li></ol><p>The heap manager marks that area as “in use” in its private data structures</p><p>It allocates slightly more memory than requested to accommodate metadata and alignment requirements</p><p>It returns a pointer (reference) to the usable portion of the allocated block</p><ol><li>Block Management<br>After allocation:</li></ol><p>The memory block’s location and size remain fixed</p><p>The block is reserved exclusively for the caller’s use—the heap won’t assign that same memory to other requests</p><p>The program accesses this memory through the returned pointer</p><h3><span id="heap-allocation-pollicies">Heap allocation Pollicies</span><a href="#heap-allocation-pollicies" class="header-anchor">#</a></h3><ul><li>Strategy 1: First Fit<ul><li>That is find the first space that is bigger than required.</li><li>Pro / Cons: fast but may waste space.</li></ul></li><li>Strategy 2: Best fit<ul><li>That is find the space of which has the smallest deviation from the desired space.</li><li>Pros / Cons: search for a block needs time but optimizes space.</li></ul></li><li>Strategy 3: Mix fit<ul><li>After searching like “number” of potential fits, choose the current best fit so far.</li></ul></li></ul><h2><span id="statics-memory">Statics memory</span><a href="#statics-memory" class="header-anchor">#</a></h2><p>The statics memory is allocated when the program begins and deallocated when the program ends.</p>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pattern Matching</title>
      <link href="/2025/03/31/PatternMatching/"/>
      <url>/2025/03/31/PatternMatching/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#basic-concepts">Basic concepts</a></li><li><a href="#brute-force">Brute Force</a><ul><li><a href="#brute-force-implementation">Brute Force Implementation</a></li><li><a href="#complexity-analysis">Complexity analysis</a></li></ul></li><li><a href="#boyer-moore">Boyer-Moore</a><ul><li><a href="#last-occurrence-table-implementation-without-the-alphabet-considered">Last Occurrence Table implementation without the alphabet considered.</a></li><li><a href="#boyer-moore-implementation">Boyer-Moore implementation</a></li><li><a href="#efficiency-of-boyer-moore">Efficiency of Boyer-Moore</a></li></ul></li><li><a href="#knuth-morris-pratt-kmp">Knuth-Morris-Pratt (KMP)</a><ul><li><a href="#build-the-kmp-table">Build the KMP table</a></li><li><a href="#kmp-algorithm">KMP algorithm</a></li><li><a href="#the-time-complexity-of-the-kmp">The time complexity of the KMP</a></li></ul></li><li><a href="#robin-karp">Robin-Karp</a><ul><li><a href="#robin-karp-implementation">Robin-Karp implementation</a></li><li><a href="#rabin-karp-time-complexity">Rabin-Karp: Time Complexity</a></li></ul></li></ul><!-- tocstop --></div><p>This is a review of the Gatech CS1332 pattern-matching algorithm.</p><h2><span id="basic-concepts">Basic concepts</span><a href="#basic-concepts" class="header-anchor">#</a></h2><ul><li>Text: the collection of alphabet</li><li>String: a sequence of characters</li><li>Alphabet: the set of possible characters in a family of strings</li><li>n: is the length of the text</li><li>m: is the length of the pattern</li><li>Pattern Matching is the same as the String Search</li></ul><h2><span id="brute-force">Brute Force</span><a href="#brute-force" class="header-anchor">#</a></h2><p>Check for every possible text. The most natural way of thinking about pattern matching</p><h3><span id="brute-force-implementation">Brute Force Implementation</span><a href="#brute-force-implementation" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// The following method find the first occurance of the pattern</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BruteForcePatternSearch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bruteForceSearch</span><span class="hljs-params">(String text, String pattern)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> text.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> pattern.length();<br><br>        <span class="hljs-comment">// Iterate through the text</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n - m; i++) &#123;<br>            <span class="hljs-type">int</span> j;<br><br>            <span class="hljs-comment">// Check for pattern match</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                <span class="hljs-keyword">if</span> (text.charAt(i + j) != pattern.charAt(j)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// If the pattern is found</span><br>            <span class="hljs-keyword">if</span> (j == m) &#123;<br>                <span class="hljs-keyword">return</span> i + m;<br>            &#125;<br>        &#125;<br> <br>&#125;<br>  <br></code></pre></td></tr></table></figure><h3><span id="complexity-analysis">Complexity analysis</span><a href="#complexity-analysis" class="header-anchor">#</a></h3><div class="table-container"><table><thead><tr><th>Scenario</th><th>Best Case Efficiency</th><th>Example Best Case</th><th>Worst Case Efficiency</th><th>Example Worst Case</th></tr></thead><tbody><tr><td><strong>No Occurrences</strong></td><td><code>O(n)</code></td><td>Text: <code>aaaaaaaaaaa</code><br>Pattern: <code>baa</code></td><td><code>O(mn)</code></td><td>Text: <code>aaaaaaaaaaa</code><br>Pattern: <code>aab</code></td></tr><tr><td><strong>Single Occurrence</strong></td><td><code>O(m)</code></td><td>Text: <code>aaaaaaaaaaaab</code><br>Pattern: <code>aab</code></td><td><code>O(mn)</code></td><td>Text: <code>aaaaaaaaaaaab</code><br>Pattern: <code>aab</code></td></tr><tr><td><strong>All Occurrence</strong></td><td><code>O(n)</code></td><td>Text: <code>aaaaaaaaaaa</code></td><td><code>O(mn)</code></td><td>Text: <code>aaaaaaaaaaaab</code><br>Pattern: <code>aab</code></td></tr></tbody></table></div><h2><span id="boyer-moore">Boyer-Moore</span><a href="#boyer-moore" class="header-anchor">#</a></h2><p>Key idea: produce a Last Occurrence Table that records the index of the last occurrence of the letter (usually a hash map), and the letters not in the alphabet of the pattern are marked as *.</p><h3><span id="last-occurrence-table-implementation-without-the-alphabet-considered">Last Occurrence Table implementation without the alphabet considered.</span><a href="#last-occurrence-table-implementation-without-the-alphabet-considered" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;Character, Integer&gt; <span class="hljs-title function_">buildLastTable</span><span class="hljs-params">(CharSequence pattern)</span> &#123;<br>    Map&lt;Character, Integer&gt; lastTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// Fill the map with the last occurrence of each character</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pattern.length(); i++) &#123;<br>        lastTable.put(pattern.charAt(i), i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> lastTable;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Three main principles in the Boyer-Moore Algorithm:</p><ul><li>Pattern found and returned.</li><li>The last occurrence has already been scanned, thus just move forward by one.</li><li>If the last occurrence has not been reached, then jump directly to the last occurrence.<h3><span id="boyer-moore-implementation">Boyer-Moore implementation</span><a href="#boyer-moore-implementation" class="header-anchor">#</a></h3></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">boyerMoore</span><span class="hljs-params">(CharSequence pattern,</span><br><span class="hljs-params">        CharSequence text,</span><br><span class="hljs-params">        CharacterComparator comparator)</span> &#123;<br>    <span class="hljs-keyword">if</span>(pattern == <span class="hljs-literal">null</span> || pattern.length() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Pattern cannot be null or empty.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span> || comparator == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Text or comparator cannot be null.&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// first generate the last occurrence table</span><br>    Map&lt;Character, Integer&gt; lastTable = buildLastTable(pattern);<br>    List&lt;Integer&gt; matches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.ArrayList&lt;&gt;();<br>    <span class="hljs-comment">// the constants</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">textLength</span> <span class="hljs-operator">=</span> text.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">patternLength</span> <span class="hljs-operator">=</span> pattern.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;= textLength - patternLength)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> patternLength - <span class="hljs-number">1</span>; <span class="hljs-comment">// this minus one is turning the size into an index</span><br>        <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; comparator.compare(text.charAt(i + j), pattern.charAt(j)) == <span class="hljs-number">0</span>)&#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j &lt; <span class="hljs-number">0</span>) &#123;<br>            matches.add(i);<br>            i ++;;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">lastIndex</span> <span class="hljs-operator">=</span> lastTable.getOrDefault(text.charAt(i + j), -<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(lastIndex &lt; j) &#123;<br>                i += j - lastIndex;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i ++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> matches;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><span id="efficiency-of-boyer-moore">Efficiency of Boyer-Moore</span><a href="#efficiency-of-boyer-moore" class="header-anchor">#</a></h3><div class="table-container"><table><thead><tr><th>Scenario</th><th>Best Case Efficiency</th><th>Example Best Case</th><th>Worst Case Efficiency</th><th>Example Worst Case</th></tr></thead><tbody><tr><td>No Occurrences</td><td>O(m + (n/m))</td><td>Pattern: bbb<br>Text: aaaaaaaaaaa</td><td>O(mn)</td><td>Pattern: baa<br>Text: aaaaaaaaaaa</td></tr><tr><td>Single Occurrence</td><td>O(m)</td><td>Pattern: aaaa<br>Text: aaaaaaaaaaa</td><td>O(mn)</td><td>Pattern: baa<br>Text: aaaaaaaaaaa</td></tr><tr><td>All Occurrences</td><td>O(m + (n/m))</td><td>Pattern: aab<br>Text: aacaaaaaab</td><td>O(mn)</td><td>Pattern: baa<br>Text: aaaaaaaaaaa</td></tr></tbody></table></div><h2><span id="knuth-morris-pratt-kmp">Knuth-Morris-Pratt (KMP)</span><a href="#knuth-morris-pratt-kmp" class="header-anchor">#</a></h2><p>Similar to Boyer-Moore, but, instead of the last occurrence table, it uses a more complicated failure table.</p><h3><span id="build-the-kmp-table">Build the KMP table</span><a href="#build-the-kmp-table" class="header-anchor">#</a></h3><p>The code follows the following rules:</p><ul><li>if i and j do not match, update j++</li><li>If i and j matches AND i == 0, update both i and j</li><li>If i and j now don’t match, then move i to i - </li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] buildFailureTable(String pattern) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> pattern.length();<br>        <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>        <br>        <span class="hljs-comment">// Initialize as per pseudocode</span><br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span> (j &lt; m) &#123;<br>            <span class="hljs-keyword">if</span> (pattern.charAt(i) == pattern.charAt(j)) &#123;<br>                <span class="hljs-comment">// Characters match - update table and advance both indices</span><br>                f[j] = i + <span class="hljs-number">1</span>;<br>                i++;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pattern.charAt(i) != pattern.charAt(j) &amp;&amp; i == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// Mismatch at beginning - no prefix to fall back on</span><br>                f[j] = <span class="hljs-number">0</span>;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Mismatch after some matches - fall back using the table</span><br>                i = f[i - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> f;&#125;<br></code></pre></td></tr></table></figure><h3><span id="kmp-algorithm">KMP algorithm</span><a href="#kmp-algorithm" class="header-anchor">#</a></h3><p>The code also follows three situations and utilizes the Failure table to avoid checking the pattern already checked. The number pointer of the pattern jump to is the number of the equal suffix and prefix since they need to move to the next place of the match -&gt; the best part of this algorithm, which is the last sentence</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kmp</span><span class="hljs-params">(String t, String p, <span class="hljs-type">int</span>[] f)</span> &#123;<br>    <span class="hljs-type">char</span>[] tChars = t.toCharArray();<br>    <span class="hljs-type">char</span>[] pChars = p.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> tChars.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> pChars.length;<br><br>    <span class="hljs-comment">// Step 1: j ← 0; k ← 0</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// Step 2: while k &lt; n</span><br>    <span class="hljs-keyword">while</span> (k &lt; n) &#123;<br>        <span class="hljs-comment">// Step 3: if p[j] = t[k]</span><br>        <span class="hljs-keyword">if</span> (pChars[j] == tChars[k]) &#123;<br>            <span class="hljs-comment">// Step 4: if j = m - 1</span><br>            <span class="hljs-keyword">if</span> (j == m - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// Step 5: return k    //match has been found</span><br>                <span class="hljs-keyword">return</span> k;<br>            &#125; <br>            <span class="hljs-comment">// Step 6: else</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Step 7: increment both j and k</span><br>                j++;<br>                k++;<br>            &#125;<br>        &#125; <br>        <span class="hljs-comment">// Step 8: else if p[j] != t[k] and j = 0</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pChars[j] != tChars[k] &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// Step 9: increment k only</span><br>            k++;<br>        &#125; <br>        <span class="hljs-comment">// Step 10: else</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Step 11: j ← f[j - 1]</span><br>            j = f[j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Pattern not found</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><span id="the-time-complexity-of-the-kmp">The time complexity of the KMP</span><a href="#the-time-complexity-of-the-kmp" class="header-anchor">#</a></h3><div class="table-container"><table><thead><tr><th>Scenario</th><th>Best Case Efficiency</th><th>Worst Case Efficiency</th></tr></thead><tbody><tr><td>No Occurrences</td><td>O(m + n)</td><td>O(m + n)</td></tr><tr><td>Single Occurrence</td><td>O(m)</td><td>O(m + n)</td></tr><tr><td>All Occurrences</td><td>O(m + n)</td><td>O(m + n)</td></tr></tbody></table></div><h2><span id="robin-karp">Robin-Karp</span><a href="#robin-karp" class="header-anchor">#</a></h2><p>This algorithm mainly uses hash comparisons to simplify the comparing process.</p><p>If the hash is the same use brute force, if not align more and update more!</p><p>Special Hash function: choose a big prime number, and make the ASCII for each character times the BASE^(index) for this polynomial function.</p><h3><span id="robin-karp-implementation">Robin-Karp implementation</span><a href="#robin-karp-implementation" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><h3><span id="rabin-karp-time-complexity">Rabin-Karp: Time Complexity</span><a href="#rabin-karp-time-complexity" class="header-anchor">#</a></h3><div class="table-container"><table><thead><tr><th>Scenario</th><th>Best Case Efficiency</th><th>Worst Case Efficiency</th></tr></thead><tbody><tr><td>No Occurrences</td><td>O(n + m)</td><td>O(nm)</td></tr><tr><td>Single Occurrence</td><td>O(n + m)</td><td>O(nm)</td></tr><tr><td>All Occurrences</td><td>O(n + m)</td><td>O(nm)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> computer_science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms </tag>
            
            <tag> pattern_matching </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction To LDO</title>
      <link href="/2025/03/29/Introduction-To-LDO/"/>
      <url>/2025/03/29/Introduction-To-LDO/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#what-is-an-ldo-regulator">What Is an LDO Regulator?</a></li><li><a href="#core-components-and-operation">Core Components and Operation</a></li><li><a href="#when-to-choose-an-ldo-regulator">When to Choose an LDO Regulator</a></li><li><a href="#optimal-application-scenarios">Optimal Application Scenarios</a></li><li><a href="#more-advanced-ldo-desgin">More advanced LDO desgin</a></li></ul><!-- tocstop --></div><h2><span id="what-is-an-ldo-regulator">What Is an LDO Regulator?</span><a href="#what-is-an-ldo-regulator" class="header-anchor">#</a></h2><p>A low-dropout regulator (LDO) is a type of DC linear voltage regulator circuit capable of operating even when the supply voltage is very close to the output voltage. This is why we sometimes choose LDO over buck converter. While no strict numerical definition exists, generally the lowest voltage at which an LDO can operate stably is less than 1V <a href="https://www.rohm.com/electronics-basics/dc-dc-converters/dcdc_what8">Reference</a>.</p><h2><span id="core-components-and-operation">Core Components and Operation</span><a href="#core-components-and-operation" class="header-anchor">#</a></h2><p>An LDO typically consists of several key components: a power FET (acting as the pass element: which is an element that allows the current to pass through it to the load), a differential amplifier (error amplifier), and a stable voltage reference (more about voltage reference generation). </p><p><img src="images/Introduction_to_LDO/Standby_Current_of_LDO_Regulator.png" alt="Standby Current of LDO Regulator" width="700" height="250"></p><p>Low Noise Performance</p><p>One of the primary reasons to choose an LDO is its superior noise performance. Unlike switching regulators, LDOs produce no switching noise as they operate without rapidly switching elements<a href="https://en.wikipedia.org/wiki/Low-dropout_regulator">1</a><a href="https://www.circuitbread.com/ee-faq/when-should-you-choose-ldo-or-buck-converter">3</a>. This makes them ideal for noise-sensitive applications such as communication equipment, radio devices, and precision analog circuits where minimizing supply noise is critical<a href="https://www.analog.com/en/resources/app-notes/an-140.html">8</a>.</p><h2><span id="when-to-choose-an-ldo-regulator">When to Choose an LDO Regulator</span><a href="#when-to-choose-an-ldo-regulator" class="header-anchor">#</a></h2><h2><span id="optimal-application-scenarios">Optimal Application Scenarios</span><a href="#optimal-application-scenarios" class="header-anchor">#</a></h2><p>LDOs excel in specific applications where their unique characteristics provide advantages over switching regulators:</p><ol><li><strong>Noise-sensitive applications</strong>: For circuits involving RF components, high-precision analog sections, or sensitive measurements, the low-noise operation of LDOs is invaluable<a href="https://www.analog.com/en/resources/app-notes/an-140.html">8</a>.</li><li><strong>Small voltage differential</strong>: When the output voltage is close to the input voltage (e.g., 5V to 3.3V), LDOs can be highly efficient solutions<a href="https://www.nklabs.com/post/2020/01/14/when-is-an-ldo-more-efficient-than-a-switching-power-converter">4</a><a href="https://www.analog.com/en/resources/app-notes/an-140.html">8</a>.</li><li><strong>Low power applications</strong>: For systems with low current requirements where thermal concerns are minimal, LDOs provide a simple, reliable solution<a href="https://www.analog.com/en/resources/app-notes/an-140.html">8</a>.</li><li><strong>Post-regulation</strong>: LDOs are often used after switching regulators to clean up noise, essentially combining the efficiency of switching regulators with the low-noise performance of LDOs<a href="https://www.analog.com/en/resources/analog-dialogue/articles/a-comprehensive-guide-to-ldo-regulators.html">2</a>.</li><li><strong>Battery-powered applications</strong>: Where light-load efficiency and minimal component count are important, LDOs can offer advantages, especially as battery voltage decreases toward the required output voltage<a href="https://www.analog.com/en/resources/app-notes/an-140.html">8</a>.</li></ol><h2><span id="more-advanced-ldo-desgin">More advanced LDO desgin</span><a href="#more-advanced-ldo-desgin" class="header-anchor">#</a></h2><p><img src="images/Introduction_to_LDO/Digital_LDO_architecture.jpg" alt="Standby Current of LDO Regulator" width="700" height="250"></p><p>This advanced design used a comparator for directing the signal and granted mroe precise control over output voltage</p>]]></content>
      
      
      <categories>
          
          <category> electrical circuit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LDO </tag>
            
            <tag> control system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Does Flyback Diode Work</title>
      <link href="/2025/03/26/How-does-flyback-diode-work/"/>
      <url>/2025/03/26/How-does-flyback-diode-work/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#the-working-principles-and-characteristics-of-diodes">The Working Principles and Characteristics of Diodes</a><ul><li><a href="#fundamental-working-mechanism-of-diodes">Fundamental Working Mechanism of Diodes</a><ul><li><a href="#the-p-n-junction-formation">The P-N Junction Formation</a></li><li><a href="#forward-and-reverse-bias">Forward and Reverse Bias</a></li><li><a href="#microscopic-reasons-for-diode-properties">Microscopic Reasons for Diode Properties</a></li><li><a href="#electric-field-and-barrier-formation">Electric Field and Barrier Formation</a></li><li><a href="#majority-and-minority-carriers">Majority and Minority Carriers</a></li><li><a href="#carrier-recombination-and-generation">Carrier Recombination and Generation</a></li></ul></li><li><a href="#the-ideal-diode-model">The Ideal Diode Model</a><ul><li><a href="#perfect-switch-approximation">Perfect Switch Approximation</a></li><li><a href="#v-i-characteristic-of-the-ideal-diode">V-I Characteristic of the Ideal Diode</a></li><li><a href="#mathematical-representation">Mathematical Representation</a></li></ul></li><li><a href="#types-of-diodes-and-their-characteristics">Types of Diodes and Their Characteristics</a><ul><li><a href="#silicon-and-germanium-diodes">Silicon and Germanium Diodes</a></li><li><a href="#schottky-diodes">Schottky Diodes</a></li><li><a href="#zener-diodes">Zener Diodes</a></li><li><a href="#light-emitting-diodes-leds">Light-Emitting Diodes (LEDs)</a></li><li><a href="#photodiodes">Photodiodes</a></li><li><a href="#gunn-diodes-and-tunnel-diodes">Gunn Diodes and Tunnel Diodes</a></li><li><a href="#pin-diodes">PIN Diodes</a></li></ul></li><li><a href="#real-life-diodes-vs-ideal-diode-model">Real-Life Diodes vs. Ideal Diode Model</a><ul><li><a href="#forward-voltage-drop">Forward Voltage Drop</a></li><li><a href="#current-voltage-relationship">Current-Voltage Relationship</a></li><li><a href="#reverse-leakage-current">Reverse Leakage Current</a></li><li><a href="#breakdown-voltage">Breakdown Voltage</a></li><li><a href="#junction-capacitance">Junction Capacitance</a></li><li><a href="#temperature-dependence">Temperature Dependence</a></li></ul></li></ul></li><li><a href="#add-a-flyback-diode-to-motor-for-better-transient-response">Add a Flyback diode to motor for better transient response</a><ul><li><a href="#basic-flyback-circuit">basic flyback circuit:</a><ul><li><a href="#theory">Theory:</a></li><li><a href="#experiments">Experiments:</a></li><li><a href="#damped-flyback-circuit-for-faster-transient-response">Damped Flyback circuit for faster transient response</a></li><li><a href="#parallelling-big-caps-for-even-little-spikes">Parallelling big Caps for even little spikes</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="the-working-principles-and-characteristics-of-diodes">The Working Principles and Characteristics of Diodes</span><a href="#the-working-principles-and-characteristics-of-diodes" class="header-anchor">#</a></h1><h2><span id="fundamental-working-mechanism-of-diodes">Fundamental Working Mechanism of Diodes</span><a href="#fundamental-working-mechanism-of-diodes" class="header-anchor">#</a></h2><p>At its core, a diode is a p-n junction, formed by combining two types of semiconductor materials within a single crystal structure. The “p” (positive) side contains an abundance of holes, while the “n” (negative) side contains freely-moving electrons<a href="https://en.wikipedia.org/wiki/P–n_junction">12</a>. When these two sides meet, something remarkable happens at their interface.</p><h3><span id="the-p-n-junction-formation">The P-N Junction Formation</span><a href="#the-p-n-junction-formation" class="header-anchor">#</a></h3><p>When p-type and n-type semiconductors are brought together, the free electrons from the n-side and the holes from the p-side begin to diffuse across the junction. As electrons move into the p-side, they recombine with holes, and similarly, as holes move into the n-side, they combine with electrons<a href="https://www.khanacademy.org/science/modern-physics-essentials/x1bb01bdec712d446:what-are-the-building-blocks-of-a-computer/x1bb01bdec712d446:how-to-create-a-one-way-conductor-using-semiconductors/v/the-pn-junction-class-12-india-physics-khan-academy">10</a>. This recombination process leaves behind charged ions in a region near the junction known as the depletion layer or depletion region<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a>.</p><p>The depletion region becomes depleted of mobile charge carriers and behaves essentially as an insulator. The exposed positive ions on the n-side and negative ions on the p-side create an internal electric field across the depletion region<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a>. This field points from the positive charges toward the negative charges, establishing a built-in potential barrier that prevents further diffusion of majority carriers unless an external voltage is applied<a href="https://en.wikipedia.org/wiki/P–n_junction">12</a>.</p><h3><span id="forward-and-reverse-bias">Forward and Reverse Bias</span><a href="#forward-and-reverse-bias" class="header-anchor">#</a></h3><p>When a positive voltage is applied to the p-side with respect to the n-side (forward bias), it reduces the potential barrier. The depletion region narrows, allowing majority carriers to flow across the junction, resulting in substantial current flow<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a>. The majority charge carriers move across the junction, with electrons flowing from n to p and holes flowing from p to n.</p><p>Conversely, when a negative voltage is applied to the p-side with respect to the n-side (reverse bias), the potential barrier increases and the depletion region widens. This pushes the majority carriers away from the junction, preventing current flow except for a small leakage current due to minority carriers<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a><a href="https://www.reddit.com/r/AskEngineers/comments/30h71v/how_do_diodes_work_why_can_the_electricity_only/">17</a>. The charge carriers introduced by the impurities move in opposite directions away from the junction.</p><h3><span id="microscopic-reasons-for-diode-properties">Microscopic Reasons for Diode Properties</span><a href="#microscopic-reasons-for-diode-properties" class="header-anchor">#</a></h3><p>Understanding the microscopic behavior of charge carriers helps explain why diodes behave as they do.</p><h3><span id="electric-field-and-barrier-formation">Electric Field and Barrier Formation</span><a href="#electric-field-and-barrier-formation" class="header-anchor">#</a></h3><p>The fundamental reason a diode conducts in only one direction lies in the electric field created at the junction. As one engineer explained, “Diodes have an internal electric field that points in some direction. If the current is with the field, great it can go through. If it is against the field, the diode stops the current”<a href="https://www.reddit.com/r/AskEngineers/comments/30h71v/how_do_diodes_work_why_can_the_electricity_only/">17</a>. The interesting property of this field is that it actually grows stronger when more voltage is applied in the reverse direction, allowing the diode to adapt to high voltages<a href="https://www.reddit.com/r/AskEngineers/comments/30h71v/how_do_diodes_work_why_can_the_electricity_only/">17</a>.</p><h3><span id="majority-and-minority-carriers">Majority and Minority Carriers</span><a href="#majority-and-minority-carriers" class="header-anchor">#</a></h3><p>On the p-side, holes constitute the majority carriers, while electrons are the minority carriers. On the n-side, electrons are the majority carriers, while holes are the minority carriers<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a>. This distinction is crucial because the majority carriers are primarily responsible for current flow under forward bias.</p><p>When the diode is forward biased, the barrier to majority carrier diffusion is lowered, allowing these carriers to cross the junction more easily. Electrons from the n-side diffuse across the junction to recombine with holes on the p-side, while holes from the p-side diffuse across to recombine with electrons on the n-side<a href="https://www.khanacademy.org/science/modern-physics-essentials/x1bb01bdec712d446:what-are-the-building-blocks-of-a-computer/x1bb01bdec712d446:how-to-create-a-one-way-conductor-using-semiconductors/v/the-pn-junction-class-12-india-physics-khan-academy">10</a>.</p><h3><span id="carrier-recombination-and-generation">Carrier Recombination and Generation</span><a href="#carrier-recombination-and-generation" class="header-anchor">#</a></h3><p>The electrons that cross the p-n junction into the p-type material (or holes that cross into the n-type material) diffuse into the nearby neutral region. This minority diffusion in the near-neutral zones determines the amount of current that can flow through the diode<a href="https://en.wikipedia.org/wiki/P–n_junction">12</a>.</p><p>n the depletion region, electron-hole pairs can be generated thermally. Under reverse bias, these minority carriers can drift across the junction, contributing to the small reverse leakage current. This generation-recombination process in the depletion region also contributes to the noise characteristics of diodes<a href="https://www.nii.ac.jp/qis/first-quantum/e/forStudents/lecture/pdf/noise/chapter6.pdf">20</a>.</p><h2><span id="the-ideal-diode-model">The Ideal Diode Model</span><a href="#the-ideal-diode-model" class="header-anchor">#</a></h2><p>The ideal diode model provides a simplified representation of diode behavior that is useful for circuit analysis and design.</p><h3><span id="perfect-switch-approximation">Perfect Switch Approximation</span><a href="#perfect-switch-approximation" class="header-anchor">#</a></h3><p>In the most basic ideal diode model, the diode is treated as a perfect switch: it conducts with zero resistance when forward biased (on) and blocks with infinite resistance when reverse biased (off)<a href="https://www.reddit.com/r/ElectricalEngineering/comments/1h9i714/could_someone_please_explain_to_me_why_a_negative/">19</a>. This simplified model makes hand calculations manageable for many practical circuits.</p><h3><span id="v-i-characteristic-of-the-ideal-diode">V-I Characteristic of the Ideal Diode</span><a href="#v-i-characteristic-of-the-ideal-diode" class="header-anchor">#</a></h3><p>The ideal diode is characterized by:</p><ul><li>Zero forward voltage drop (VF = 0V)</li><li>Zero reverse current (IR = 0A)</li><li>Instantaneous switching between on and off states</li><li>Infinite reverse breakdown voltage</li></ul><p>This idealization results in a perfectly rectangular current-voltage characteristic: infinite current for any positive voltage, and zero current for any negative voltage<a href="https://www.reddit.com/r/AskElectronics/comments/6uuk3e/ideal_vs_actual_diodes_simulation_of_2_seemingly/">3</a>.</p><h3><span id="mathematical-representation">Mathematical Representation</span><a href="#mathematical-representation" class="header-anchor">#</a></h3><p>Mathematically, the ideal diode can be represented as:</p><p>I = 0 for V &lt; 0 (reverse bias)<br> V = 0 for I &gt; 0 (forward bias)</p><h2><span id="types-of-diodes-and-their-characteristics">Types of Diodes and Their Characteristics</span><a href="#types-of-diodes-and-their-characteristics" class="header-anchor">#</a></h2><p>Diodes have evolved into numerous specialized types, each optimized for specific applications.</p><h3><span id="silicon-and-germanium-diodes">Silicon and Germanium Diodes</span><a href="#silicon-and-germanium-diodes" class="header-anchor">#</a></h3><p>These are the most common general-purpose diodes. Silicon diodes typically have a forward voltage drop of about 0.7V, while germanium diodes have a lower drop of about 0.3V<a href="https://www.reddit.com/r/AskElectronics/comments/o0f24m/starter_guide_for_diodes/">4</a>. Silicon diodes handle higher temperatures better than germanium and are more commonly used in modern electronics.</p><h3><span id="schottky-diodes">Schottky Diodes</span><a href="#schottky-diodes" class="header-anchor">#</a></h3><p>Schottky Barrier Diodes (SBDs) feature a metal-semiconductor junction rather than a p-n junction. They have several advantages:</p><ul><li>Lower forward voltage drop (typically 0.2-0.4V)</li><li>Faster switching speeds due to the absence of minority carrier storage</li><li>Suitable for high-frequency applications</li></ul><p>These diodes are more efficient because of their lower forward voltage, making them ideal for power supply applications<a href="https://www.reddit.com/r/AskElectronics/comments/o0f24m/starter_guide_for_diodes/">4</a>.</p><h3><span id="zener-diodes">Zener Diodes</span><a href="#zener-diodes" class="header-anchor">#</a></h3><p>Zener diodes are specifically designed to operate in the reverse breakdown region without being damaged. They maintain a relatively constant voltage drop when reverse-biased beyond their breakdown voltage, making them useful for:</p><ul><li>Voltage regulation</li><li>Protection circuits</li><li>Reference voltage sources</li></ul><p>As described in the search results, “Zeners will stop acting like a diode above a certain voltage… if the input line goes above 5 volts, the Zener will break down and open the MOSFET”<a href="https://www.reddit.com/r/AskElectronics/comments/o0f24m/starter_guide_for_diodes/">4</a>.</p><h3><span id="light-emitting-diodes-leds">Light-Emitting Diodes (LEDs)</span><a href="#light-emitting-diodes-leds" class="header-anchor">#</a></h3><p>LEDs convert electrical energy into light when forward biased. They are constructed using semiconductor materials where the energy released during electron-hole recombination produces photons. Different semiconductor compounds produce different wavelengths of light, enabling various colors<a href="https://www.reddit.com/r/askscience/comments/zuuspp/why_do_we_only_have_leds_around_the_visible_light/">7</a><a href="https://www.nature.com/articles/s41377-022-00814-8">16</a>.</p><h3><span id="photodiodes">Photodiodes</span><a href="#photodiodes" class="header-anchor">#</a></h3><p>These diodes are designed to be sensitive to light, generating a current when illuminated. They are typically operated in reverse bias, where incident light creates electron-hole pairs in the depletion region, producing a current proportional to light intensity<a href="https://www.reddit.com/r/AskElectronics/comments/p4vzho/how_does_the_photodiode_help_maintain_the_output/">2</a>.</p><h3><span id="gunn-diodes-and-tunnel-diodes">Gunn Diodes and Tunnel Diodes</span><a href="#gunn-diodes-and-tunnel-diodes" class="header-anchor">#</a></h3><p>For specialized applications like microwave generation, Gunn diodes leverage the negative resistance coefficient causing plasma instability. When properly biased and placed in a waveguide, a Gunn diode can convert DC into microwaves in one step<a href="https://www.reddit.com/r/askscience/comments/zuuspp/why_do_we_only_have_leds_around_the_visible_light/">7</a>.</p><p>Tunnel diodes exhibit negative differential resistance in their I-V curves, meaning current decreases as voltage increases over certain ranges, making them useful for high-frequency oscillators and amplifiers<a href="https://www.reddit.com/r/askscience/comments/zuuspp/why_do_we_only_have_leds_around_the_visible_light/">7</a>.</p><h3><span id="pin-diodes">PIN Diodes</span><a href="#pin-diodes" class="header-anchor">#</a></h3><p>PIN diodes have an intrinsic semiconductor layer between the p and n regions. They are commonly used in RF applications, including switches and attenuators. When forward biased, they act as variable resistors for RF signals without distorting them<a href="https://www.semanticscholar.org/paper/ec136f2536e38d493d94d67227c2a4c22197bd97">9</a>.</p><h2><span id="real-life-diodes-vs-ideal-diode-model">Real-Life Diodes vs. Ideal Diode Model</span><a href="#real-life-diodes-vs-ideal-diode-model" class="header-anchor">#</a></h2><p>Real diodes deviate significantly from the ideal model in several important ways.</p><h3><span id="forward-voltage-drop">Forward Voltage Drop</span><a href="#forward-voltage-drop" class="header-anchor">#</a></h3><p>Unlike the ideal diode with zero voltage drop, real diodes require a threshold voltage before significant conduction occurs. This threshold is typically around 0.7V for silicon diodes and 0.3V for germanium diodes<a href="https://www.reddit.com/r/ElectricalEngineering/comments/1h9i714/could_someone_please_explain_to_me_why_a_negative/">19</a>. This forward voltage drop represents energy required to overcome the potential barrier at the junction.</p><h3><span id="current-voltage-relationship">Current-Voltage Relationship</span><a href="#current-voltage-relationship" class="header-anchor">#</a></h3><p>Real diodes don’t switch instantly between conducting and non-conducting states. Instead, they follow an exponential current-voltage relationship described by the Shockley diode equation. As one source explains, “a diode doesn’t have a fixed forward voltage, rather it has a current/voltage response curve”<a href="https://www.reddit.com/r/AskElectronics/comments/6uuk3e/ideal_vs_actual_diodes_simulation_of_2_seemingly/">3</a>. This curve shows a gradual increase in current as forward voltage increases, rather than an instant jump to conduction.</p><h3><span id="reverse-leakage-current">Reverse Leakage Current</span><a href="#reverse-leakage-current" class="header-anchor">#</a></h3><p>Real diodes allow a small current to flow when reverse biased, called the reverse leakage current or reverse saturation current. This current is typically in the nanoampere or microampere range and is caused by thermally generated minority carriers in the semiconductor<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a>.</p><h3><span id="breakdown-voltage">Breakdown Voltage</span><a href="#breakdown-voltage" class="header-anchor">#</a></h3><p>While the ideal diode can withstand infinite reverse voltage, real diodes have a breakdown voltage limit. When the reverse voltage exceeds this limit, the diode conducts in the reverse direction, potentially causing damage if the current isn’t limited. This breakdown can occur through various mechanisms:</p><ul><li>Zener breakdown (in heavily doped junctions)</li><li>Avalanche breakdown (in lightly doped junctions)</li></ul><p>The breakdown voltage can vary from less than one volt to thousands of volts, depending on the impurity concentration and other device parameters<a href="https://www.britannica.com/science/semiconductor/The-p-n-junction">14</a>.</p><h3><span id="junction-capacitance">Junction Capacitance</span><a href="#junction-capacitance" class="header-anchor">#</a></h3><p>Real diodes exhibit capacitance effects that are absent in the ideal model. Two types of capacitance affect diode performance:</p><ol><li>Depletion layer capacitance - dominates under reverse bias and weak forward bias</li><li>Diffusion capacitance - dominates under strong forward bias</li></ol><p>These capacitances limit the switching speed of diodes, which is particularly important in high-frequency applications<a href="https://www.nii.ac.jp/qis/first-quantum/e/forStudents/lecture/pdf/noise/chapter6.pdf">20</a>.</p><h3><span id="temperature-dependence">Temperature Dependence</span><a href="#temperature-dependence" class="header-anchor">#</a></h3><p>The behavior of real diodes varies with temperature. As temperature increases:</p><ul><li>Forward voltage drop decreases</li><li>Reverse leakage current increases</li><li>Breakdown voltage changes</li></ul><p>These temperature effects must be considered in circuit design, especially for applications operating across wide temperature ranges.</p><h1><span id="add-a-flyback-diode-to-motor-for-better-transient-response">Add a Flyback diode to motor for better transient response</span><a href="#add-a-flyback-diode-to-motor-for-better-transient-response" class="header-anchor">#</a></h1><h2><span id="basic-flyback-circuit">basic flyback circuit:</span><a href="#basic-flyback-circuit" class="header-anchor">#</a></h2><h3><span id="theory">Theory:</span><a href="#theory" class="header-anchor">#</a></h3><h3><span id="experiments">Experiments:</span><a href="#experiments" class="header-anchor">#</a></h3><ol><li><p>Control group setup: simply connect the DC brush moter with the power supply:</p><p><img src="\images\How-does-flyback-diode-work\IMG_6891.jpg" alt="Transient reponse without a flyback diodes" width="250" height="250" align-self="center"></p></li><li><p>This is the diode I used for experiments: <a href="https://www.vishay.com/docs/88525/1n5817.pdf">Schottky diode N5817</a></p><p><img src="\images\How-does-flyback-diode-work\IMG_6889.jpg" alt="First diode used" width="250" height="250" align-self="center"></p><p><img src="\images\How-does-flyback-diode-work\IMG_6899.jpg" alt="Flyback diode response" width="250" height="250" align-self="center"></p></li><li><p>The response time is shorted and the spikes are more controlled, even though Spikes are still obvious due to transient response.</p></li><li><p>Additionally, I have used different rating diodes for experiments. Generally, diodes with lower breakdown voltage ratings are better suited for applications involving smaller voltages, as they are more likely to conduct reliably and efficiently under those conditions.</p></li></ol><h3><span id="damped-flyback-circuit-for-faster-transient-response">Damped Flyback circuit for faster transient response</span><a href="#damped-flyback-circuit-for-faster-transient-response" class="header-anchor">#</a></h3><p><img src="\images\How-does-flyback-diode-work\IMG_6893.jpg" alt="The diode is in series with a resistor" width="250" height="250" align-self="center"></p><p>This damped resistor has to be chozen corrected base on the predicted response, neither too big or too small. Nevertheless, It might be the problem of pretty unpredictable inital state that for the same resistance, the response is different and might not faster than the no resister circuit. </p><h3><span id="parallelling-big-caps-for-even-little-spikes">Parallelling big Caps for even little spikes</span><a href="#parallelling-big-caps-for-even-little-spikes" class="header-anchor">#</a></h3><p><img src="\images\How-does-flyback-diode-work\IMG_6904.jpg" alt="The diode is in parallel with a capacitor" width="250" height="250" align-self="center"></p><p><img src="\images\How-does-flyback-diode-work\IMG_6903.jpg" alt="Actual circuit graph" width="250" height="250"></p><p>The capactor resist the change in voltage between ground and the power, thus reducing the voltage spikes generated by the inductor.</p>]]></content>
      
      
      
        <tags>
            
            <tag> guide </tag>
            
            <tag> experiments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32MP157 guide</title>
      <link href="/2025/03/25/STM32MP157-guide/"/>
      <url>/2025/03/25/STM32MP157-guide/</url>
      
        <content type="html"><![CDATA[<h1><span id="guide-to-stm32mp157-routing">Guide to STM32MP157 Routing</span><a href="#guide-to-stm32mp157-routing" class="header-anchor">#</a></h1><h2><span id="timing-and-clocking">Timing and clocking</span><a href="#timing-and-clocking" class="header-anchor">#</a></h2><ul><li><p>High speed External Oscillator(HSE) : at 16-24Mhz  and uses PH0-OSC IN and PH1-OSC OUT</p></li><li><p>Low speed External Oscillator (LSE):  for RTC and uses PC14-OSC32_IN and PC15-OSC32_OUT</p></li></ul><p>This STM package we are using  8-48 MHz HSE oscillator, 32.768 kHz LSE oscillator. Crystal is symmetical. Normally we can connect it with 10pF caps and no exit resistance. For more <a href="https://www.st.com/resource/en/application_note/an2867-guidelines-for-oscillator-design-on-stm8afals-and-stm32-mcusmpus-stmicroelectronics.pdf">information</a>.</p><h2><span id="power-pins">Power pins</span><a href="#power-pins" class="header-anchor">#</a></h2><h3><span id="general-pins">General pins</span><a href="#general-pins" class="header-anchor">#</a></h3><ul><li><p><strong>VCC(Voltage Common Collector)</strong>: supply voltage for the digital circuit.</p></li><li><p><strong>VCCA</strong>: supply voltage to the analog circuit.</p></li><li><p><strong>VDD</strong>: Main digital power supply</p></li><li><p><strong>VSS</strong>: ground reference for MOSFET circuits. Critical for the circuit return path.</p></li><li><p><strong>VEE</strong>: negative supply in BJT circuits.</p><hr><h3><span id="specific-pins">Specific pins</span><a href="#specific-pins" class="header-anchor">#</a></h3></li><li><p><strong>VREF</strong>+: Internal or external ADC/DAC reference. Requires Low-noise filtering (usually 0.1uF or 4.7uF caps). For snaller pint-count chips, VREF+ might be internally tied to VDDA.</p></li><li><strong>VBAT</strong>: Backup-power for RTC / IC, usually filtered by a 4.7uF capacitor.</li><li><strong>VPP</strong>: stands for Peak-to-Peak voltage</li></ul><h3><span id="techniques-for-connections">Techniques for connections</span><a href="#techniques-for-connections" class="header-anchor">#</a></h3><ul><li>Adding decoupling capacitors(can be further from the IC) for fasting current inflow, since when current is draw voltage would decrease, and it is exactly when the decoupling capacitor will supply its voltage.<ul><li>Local decoupling capacitors: local faster current drawing</li><li>Bulk decoupling capacitors: overall current transient response</li></ul></li><li>Adding ferrite Bead for VDDA analog ground.</li></ul><h2><span id="boot-pins">Boot pins</span><a href="#boot-pins" class="header-anchor">#</a></h2><p><img src="images/Guide-to-stm32MP157-routing/boot-mode.png" alt="boot-mode" width="700" height="250"></p><ul><li>If the booting is not desired, pull this low with 10k/1M R or a switch</li></ul><h2><span id="nrst-pins">NRST pins</span><a href="#nrst-pins" class="header-anchor">#</a></h2><p><img src="images/Guide-to-stm32MP157-routing/nrst.png" alt="nrst" width="700" height="250"></p><p>Nomally a weak pull-up resistor 40k. A good way to prevent spurious reset is to strengthen the internal pull up with smaller 10k connected to 3V3 and add a debouncing capacitor.</p>]]></content>
      
      
      <categories>
          
          <category> ic design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A guide to Cmake</title>
      <link href="/2025/03/25/Cmake-guide-md/"/>
      <url>/2025/03/25/Cmake-guide-md/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#cmake-execution-flow-chart">CMake execution flow chart</a></li><li><a href="#three-main-stages">Three Main Stages</a><ul><li><a href="#configurations">Configurations</a></li><li><a href="#generations">Generations</a></li><li><a href="#build">Build</a></li></ul></li><li><a href="#core-cmake-concepts">Core CMake Concepts</a><ul><li><a href="#targets-and-properties">Targets and Properties</a></li><li><a href="#find-packages-and-dependencies">Find Packages and Dependencies</a></li></ul></li><li><a href="#advanced-cmake-topics">Advanced CMake Topics</a><ul><li><a href="#generator-expressions">Generator Expressions</a></li><li><a href="#custom-commands-and-build-events">Custom Commands and Build Events</a></li><li><a href="#configuring-files">Configuring Files</a></li></ul></li><li><a href="#modern-cmake-best-practices">Modern CMake Best Practices</a><ul><li><a href="#multi-project-organization">Multi-Project Organization</a></li><li><a href="#package-installation-and-export">Package Installation and Export</a></li><li><a href="#debugging-cmake">Debugging CMake</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="cmake-execution-flow-chart">CMake execution flow chart</span><a href="#cmake-execution-flow-chart" class="header-anchor">#</a></h2><pre class="mermaid">graph TD    A[Start] --> B["Write CMakeLists.txt Files"]    B --> C["Run CMake Command (e.g., cmake .)"]    C --> D{"CMakeLists.txt Valid?"}    D -- No --> E["Error Message<br>Fix Configuration"]    D -- Yes --> F["Parse CMakeLists.txt"]    F --> G["Check System Dependencies<br>(Compiler, Libraries)"]    G --> H{"All Dependencies Found?"}    H -- No --> I["Error Message<br>Missing Tools/Libraries"]    H -- Yes --> J["Generate Build System Files<br>(Makefiles, .sln, Xcode Projects)"]    J --> K["Build System Ready"]    K --> L["Run Build Tool<br>(make, ninja, MSBuild)"]    L --> M{"Compilation<br>Successful?"}    M -- No --> N["Fix Code/Configuration"]    M -- Yes --> O["Generate Executables/Libraries"]    O --> P[End]</pre><h2><span id="three-main-stages">Three Main Stages</span><a href="#three-main-stages" class="header-anchor">#</a></h2><h3><span id="configurations">Configurations</span><a href="#configurations" class="header-anchor">#</a></h3><ol><li><strong>Parsing CMakeLists.txt</strong>: CMake reads your build description files and executes the commands sequentially</li><li><strong>System inspection</strong>: Checks for available compilers, tools, and libraries on the system</li><li><strong>Dependency resolution</strong>: Identifies and locates required external packages</li><li><strong>Variable evaluation</strong>: Sets up build variables and processes conditionals</li></ol><h3><span id="generations">Generations</span><a href="#generations" class="header-anchor">#</a></h3><ol><li><strong>Build system selection</strong>: CMake determines which generator to use (Make, Ninja, Visual Studio, etc.)</li><li><strong>File generation</strong>: Creates all necessary files for the selected build system</li><li><strong>Dependency graph construction</strong>: Maps out how targets depend on each other.</li></ol><h3><span id="build">Build</span><a href="#build" class="header-anchor">#</a></h3><ol><li><strong>Compilation</strong>: Source files are compiled into object files</li><li><strong>Linking</strong>: Object files are linked together to form executables or libraries</li><li><strong>Post-build steps</strong>: Any custom commands or installation rules are executed</li></ol><h2><span id="core-cmake-concepts">Core CMake Concepts</span><a href="#core-cmake-concepts" class="header-anchor">#</a></h2><h3><span id="targets-and-properties">Targets and Properties</span><a href="#targets-and-properties" class="header-anchor">#</a></h3><p>In modern CMake, everything revolves around <strong>targets</strong> (executables, libraries, custom outputs) and <strong>properties</strong> associated with those targets:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br># Create a library target<br>add_library(MyLib SHARED src/lib.cpp src/utils.cpp)<br><br># Set properties on the target<br>target_include_directories(MyLib <br>    PUBLIC include             # Headers for users of the library<br>    PRIVATE src                # Internal headers<br>)<br>target_compile_features(MyLib PUBLIC cxx_std_17)<br></code></pre></td></tr></table></figure><p>Properties can have different visibility levels:</p><ul><li><strong>PRIVATE</strong>: Used only by the target itself</li><li><strong>PUBLIC</strong>: Used by both the target and any target that links to it</li><li><strong>INTERFACE</strong>: Used only by targets that link to this one<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a></li></ul><h3><span id="find-packages-and-dependencies">Find Packages and Dependencies</span><a href="#find-packages-and-dependencies" class="header-anchor">#</a></h3><p>CMake provides a powerful mechanism for finding and using external libraries:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br># Find an external package<br>find_package(Boost REQUIRED COMPONENTS system filesystem)<br><br># Link against it<br>target_link_libraries(MyApp PRIVATE Boost::system Boost::filesystem)<br></code></pre></td></tr></table></figure><p>This approach works with CMake’s built-in find modules and package config files provided by libraries<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</p><h2><span id="advanced-cmake-topics">Advanced CMake Topics</span><a href="#advanced-cmake-topics" class="header-anchor">#</a></h2><h3><span id="generator-expressions">Generator Expressions</span><a href="#generator-expressions" class="header-anchor">#</a></h3><p>Generator expressions provide powerful capabilities for conditional property setting:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br>target_compile_definitions(MyApp PRIVATE<br>    &quot;VERSION_STR=\&quot;$&lt;$&lt;CONFIG:Debug&gt;:Debug_&gt;$&#123;VERSION&#125;\&quot;&quot;)<br></code></pre></td></tr></table></figure><p>This adds a different version string definition depending on the build configuration<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</p><h3><span id="custom-commands-and-build-events">Custom Commands and Build Events</span><a href="#custom-commands-and-build-events" class="header-anchor">#</a></h3><p>For special build steps:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br>add_custom_command(<br>    OUTPUT $&#123;CMAKE_CURRENT_BINARY_DIR&#125;/generated.cpp<br>    COMMAND $&#123;PYTHON_EXECUTABLE&#125; $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/generator.py<br>    DEPENDS $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/input.txt<br>)<br></code></pre></td></tr></table></figure><h3><span id="configuring-files">Configuring Files</span><a href="#configuring-files" class="header-anchor">#</a></h3><p>CMake can generate files with variable substitutions:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br>configure_file(<br>    &quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;<br>    &quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;<br>)<br></code></pre></td></tr></table></figure><p>In <code>config.h.in</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">c<br>#define VERSION &quot;@PROJECT_VERSION@&quot;<br></code></pre></td></tr></table></figure><p>This will substitute the <code>@PROJECT_VERSION@</code> token with the actual project version<a href="https://cmake.org/cmake/help/book/mastering-cmake/cmake/Help/guide/tutorial/">17</a>.</p><h2><span id="modern-cmake-best-practices">Modern CMake Best Practices</span><a href="#modern-cmake-best-practices" class="header-anchor">#</a></h2><p>The field of CMake best practices has evolved over time. Here are the most important guidelines:</p><ol><li><strong>Use at least CMake 3.0</strong>: Modern CMake features are only available in newer versions<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Treat CMake code as production code</strong>: Keep it clean, organized, and follow consistent patterns<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Define project properties at target level</strong>: Avoid global settings that affect all targets<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Forget directory-level commands</strong>: Avoid <code>add_compile_options</code>, <code>include_directories</code>, <code>link_directories</code>, and <code>link_libraries</code><a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Keep your hands off CMAKE_CXX_FLAGS</strong>: Use target properties instead<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Always specify visibility with target commands</strong>: Use <code>PRIVATE</code>, <code>PUBLIC</code>, or <code>INTERFACE</code> appropriately<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Don’t use <code>file(GLOB)</code> for source files</strong>: List source files explicitly so CMake can detect when they change<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li><li><strong>Create proper installation rules</strong>: Define what gets installed and where<a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</li></ol><h3><span id="multi-project-organization">Multi-Project Organization</span><a href="#multi-project-organization" class="header-anchor">#</a></h3><p>For larger projects with multiple components:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br># Top-level CMakeLists.txt<br>cmake_minimum_required(VERSION 3.10)<br>project(SuperProject VERSION 1.0)<br><br># Add subdirectories for components<br>add_subdirectory(lib)<br>add_subdirectory(app)<br></code></pre></td></tr></table></figure><p>In <code>app/CMakeLists.txt</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br>add_executable(MyApp main.cpp)<br>target_link_libraries(MyApp PRIVATE MyLib)<br></code></pre></td></tr></table></figure><p>This approach enables proper dependency tracking between subprojects<a href="https://www.reddit.com/r/cpp/comments/1avfs34/any_good_guides_for_setting_up_multilibrary_cmake/">3</a>.</p><h3><span id="package-installation-and-export">Package Installation and Export</span><a href="#package-installation-and-export" class="header-anchor">#</a></h3><p>To make your library usable by other CMake projects:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br>install(TARGETS MyLib<br>    EXPORT MyLibTargets<br>    LIBRARY DESTINATION lib<br>    ARCHIVE DESTINATION lib<br>    RUNTIME DESTINATION bin<br>    INCLUDES DESTINATION include<br>)<br><br>install(EXPORT MyLibTargets<br>    FILE MyLibTargets.cmake<br>    NAMESPACE MyLib::<br>    DESTINATION lib/cmake/MyLib<br>)<br><br>configure_package_config_file(<br>    MyLibConfig.cmake.in<br>    $&#123;CMAKE_CURRENT_BINARY_DIR&#125;/MyLibConfig.cmake<br>    INSTALL_DESTINATION lib/cmake/MyLib<br>)<br><br>install(FILES<br>    $&#123;CMAKE_CURRENT_BINARY_DIR&#125;/MyLibConfig.cmake<br>    DESTINATION lib/cmake/MyLib<br>)<br></code></pre></td></tr></table></figure><p>This creates a complete package that other projects can use with <code>find_package(MyLib)</code><a href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1">8</a>.</p><h3><span id="debugging-cmake">Debugging CMake</span><a href="#debugging-cmake" class="header-anchor">#</a></h3><p>For troubleshooting CMake issues:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">bash<br># Verbose output during build<br>cmake --build build --verbose<br><br># See variable values<br>message(STATUS &quot;My variable: $&#123;MY_VARIABLE&#125;&quot;)<br><br># Dump all variables<br>cmake -LA .<br><br># Inspect the build system<br>cmake --trace-expand .<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Signal Integrity Notes</title>
      <link href="/2025/03/24/Signal-Integrity/"/>
      <url>/2025/03/24/Signal-Integrity/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#introduction-to-signal-integrity">Introduction to Signal Integrity</a><ul><li><a href="#signal-integrity-definition">Signal Integrity Definition</a><ul><li><a href="#three-main-considerations">Three main considerations:</a></li><li><a href="#four-families-of-signal-integrity-problem">Four families of signal Integrity Problem</a></li><li><a href="#three-factors-to-signal-quality-with-one-net">Three factors to Signal quality with one Net</a></li><li><a href="#two-situations-that-cross-talk-happens">Two situations that Cross-talk happens</a></li></ul></li><li><a href="#routing-techniques">Routing Techniques</a><ul><li><a href="#three-basic-aspects-of-traces-to-consider">Three basic aspects of traces to consider :</a></li><li><a href="#four-basic-techniques-for-gnding-and-vias-placement">Four basic techniques for GNDing and vias placement :</a></li><li><a href="#practical-techniques-for-gounding">Practical techniques for Gounding</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="introduction-to-signal-integrity">Introduction to Signal Integrity</span><a href="#introduction-to-signal-integrity" class="header-anchor">#</a></h1><h2><span id="signal-integrity-definition">Signal Integrity Definition</span><a href="#signal-integrity-definition" class="header-anchor">#</a></h2><h3><span id="three-main-considerations">Three main considerations:</span><a href="#three-main-considerations" class="header-anchor">#</a></h3><ul><li><p>Timing </p></li><li><p>Noise</p></li><li><p>Electromagnetic interference (Consider Singal integrity when the clock reaches approximately 100Mhz)</p></li></ul><h3><span id="four-families-of-signal-integrity-problem">Four families of signal Integrity Problem</span><a href="#four-families-of-signal-integrity-problem" class="header-anchor">#</a></h3><p><strong>1.</strong> Signal quality of one net, including losses on the line</p><p><strong>2.</strong> Cross-talk between two or more nets, including ground and power balance</p><p><strong>3.</strong> Rail collapse in the power and ground distribution</p><p><strong>4.</strong> Electromagnetic interference and radiation from the entire system</p><p><em>Definition of a Net: A net comprises all the metal connected in a system.</em></p><h3><span id="three-factors-to-signal-quality-with-one-net">Three factors to Signal quality with one Net</span><a href="#three-factors-to-signal-quality-with-one-net" class="header-anchor">#</a></h3><ul><li>1 and 2: Frequency-dependent losses in the line from the conductor and the dielectric cause higher-frequency signal components to be attenuated more than the lower-frequency components. The end result is an increase in the rise time of the signal as it propagates. When this rise time degradation approaches the period of a single bit, the digital information will be distorted.  This effect is called <strong>inter-symbol interference (ISI)</strong></li><li>Skew in the single net (time delay between two or more nets can be adjusted by matching the length of two nets)</li></ul><h3><span id="two-situations-that-cross-talk-happens">Two situations that Cross-talk happens</span><a href="#two-situations-that-cross-talk-happens" class="header-anchor">#</a></h3><ul><li>When the interconnects are uniform transmission lines: Anything that changes the return path from a wide uniform plane will increase the amount of coupled noise between two transmission lines.</li><li>When they are not uniform transmission lines:</li></ul><h2><span id="routing-techniques">Routing Techniques</span><a href="#routing-techniques" class="header-anchor">#</a></h2><h3><span id="three-basic-aspects-of-traces-to-consider">Three basic aspects of traces to consider :</span><a href="#three-basic-aspects-of-traces-to-consider" class="header-anchor">#</a></h3><ol><li><p>Trace width / cross section: wider or narrower for impedence matching.</p></li><li><p>Trace length: </p><ul><li><p>Length match for phase control (differential pairs, PS ground plane underneath should uninterrupted)</p></li><li><p>bigger loop area for less induced currents interference.</p></li></ul></li><li><p>Trace distribution: concentrated on one region for less EMI.</p><ul><li>Seperate digital and analog components part (seperate grounding), sometimes called split ground.</li><li>High-Speed components should be placed near the ground plane / away from the board edges.</li></ul></li></ol><h3><span id="four-basic-techniques-for-gnding-and-vias-placement">Four basic techniques for GNDing and vias placement :</span><a href="#four-basic-techniques-for-gnding-and-vias-placement" class="header-anchor">#</a></h3><ol><li>Star grounding topology to prevent ground loops.</li><li>Power-Ground Couping </li><li>Shielding using metal shield or guard traces arround sensitive components</li></ol><h3><span id="practical-techniques-for-gounding">Practical techniques for Gounding</span><a href="#practical-techniques-for-gounding" class="header-anchor">#</a></h3><ul><li><strong>Grounding Near Connectors:</strong> Place ground ports adjacent to I/O connectors to provide a direct return path, minimizing loop area.</li><li><strong>Ground Pours:</strong> Use in unused board areas, connected via vias to prevent antenna effects from floating metal.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PCB design </tag>
            
            <tag> Layout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo category can&#39;t deploy fix</title>
      <link href="/2025/03/24/Hexo-category-fix/"/>
      <url>/2025/03/24/Hexo-category-fix/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#issues">Issues</a></li><li><a href="#solution">Solution</a></li><li><a href="#confession">Confession</a></li></ul><!-- tocstop --></div><h2><span id="issues">Issues</span><a href="#issues" class="header-anchor">#</a></h2><p>On the local host, the category function is doing pretty well. But after deployment, for the category page, the links for each category lead to 404 Not Found errors. </p><p><img src="/images/Hexo-category-fix/hexo-fix1.png" alt="Error demonstration" width="700" height="250"></p><h2><span id="solution">Solution</span><a href="#solution" class="header-anchor">#</a></h2><p>The category tag can’t be capitalized, since the deployment process (don’t know where) uncapitalizes every word and stores them in the GitHub repo.</p><p><img src="/images/Hexo-category-fix/hexo-fix2.png" alt="Error demonstration" width="800" height="30"></p><h2><span id="confession">Confession</span><a href="#confession" class="header-anchor">#</a></h2><p>I spent too much time on this freaking problem /cry… Still, I can’t find the API which Hexo uses for the deployment (or I just don’t want to read through all the node modules).</p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora Guide</title>
      <link href="/2025/03/24/typora-guide/"/>
      <url>/2025/03/24/typora-guide/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#the-complete-typora-guide-mastering-markdown-with-power-and-efficiency">The Complete Typora Guide: Mastering Markdown with Power and Efficiency</a><ul><li><a href="#introduction-to-typora">Introduction to Typora</a></li><li><a href="#basic-markdown-syntax">Basic Markdown Syntax</a></li><li><a href="#paragraphs-and-line-breaks">Paragraphs and Line Breaks</a></li><li><a href="#headings">Headings</a></li><li><a href="#emphasis">Emphasis</a></li><li><a href="#lists">Lists</a></li><li><a href="#links-and-images">Links and Images</a></li><li><a href="#blockquotes">Blockquotes</a></li><li><a href="#code">Code</a></li><li><a href="#typora-s-unique-features">Typora’s Unique Features</a></li><li><a href="#live-preview-mode">Live Preview Mode</a></li><li><a href="#focus-mode">Focus Mode</a></li><li><a href="#typewriter-mode">Typewriter Mode</a></li><li><a href="#outline-panel">Outline Panel</a></li><li><a href="#keyboard-shortcuts">Keyboard Shortcuts</a></li><li><a href="#file-operations">File Operations</a></li><li><a href="#editing">Editing</a></li><li><a href="#formatting">Formatting</a></li><li><a href="#view">View</a></li><li><a href="#document-organization">Document Organization</a></li><li><a href="#using-the-sidebar">Using the Sidebar</a></li><li><a href="#creating-an-efficient-folder-structure">Creating an Efficient Folder Structure</a></li><li><a href="#file-naming-conventions">File Naming Conventions</a></li><li><a href="#quick-file-access">Quick File Access</a></li><li><a href="#themes-and-customization">Themes and Customization</a></li><li><a href="#built-in-themes">Built-in Themes</a></li><li><a href="#installing-custom-themes">Installing Custom Themes</a></li><li><a href="#creating-custom-css-modifications">Creating Custom CSS Modifications</a></li><li><a href="#export-and-compilation">Export and Compilation</a></li><li><a href="#export-options">Export Options</a></li><li><a href="#using-pandoc-for-advanced-export">Using Pandoc for Advanced Export</a></li><li><a href="#customizing-export-settings">Customizing Export Settings</a></li><li><a href="#markdown-export-and-reformatting">Markdown Export and Reformatting</a></li><li><a href="#advanced-features">Advanced Features</a></li><li><a href="#math-expressions">Math Expressions</a></li><li><a href="#diagrams">Diagrams</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="the-complete-typora-guide-mastering-markdown-with-power-and-efficiency">The Complete Typora Guide: Mastering Markdown with Power and Efficiency</span><a href="#the-complete-typora-guide-mastering-markdown-with-power-and-efficiency" class="header-anchor">#</a></h1><h2><span id="introduction-to-typora">Introduction to Typora</span><a href="#introduction-to-typora" class="header-anchor">#</a></h2><p>Typora is a minimalist Markdown editor that revolutionizes writing through its seamless “Live Preview” functionality. </p><h2><span id="basic-markdown-syntax">Basic Markdown Syntax</span><a href="#basic-markdown-syntax" class="header-anchor">#</a></h2><p>Typora supports standard Markdown syntax with [GitHub Flavored Markdown extensions][<a href="https://github.github.com/gfm/">https://github.github.com/gfm/</a>]. Here’s how to use the most common elements:</p><h2><span id="paragraphs-and-line-breaks">Paragraphs and Line Breaks</span><a href="#paragraphs-and-line-breaks" class="header-anchor">#</a></h2><p>In Typora, pressing <code>Enter</code> once creates a new paragraph. For a single line break, use <code>Shift + Enter</code>. Unlike standard Markdown, which requires two blank lines for paragraph separation, Typora only requires one<a href="https://support.typora.io/media/export/Markdown-Reference.pdf">2</a>.</p><h2><span id="headings">Headings</span><a href="#headings" class="header-anchor">#</a></h2><p>Create headings using 1-6 hash (<code>#</code>) characters at the start of a line, followed by a space:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br># Heading 1<br>## Heading 2<br>### Heading 3<br></code></pre></td></tr></table></figure><p>In Typora, typing these and pressing <code>Enter</code> automatically formats the text as a heading. Alternatively, use keyboard shortcuts <code>Ctrl+1</code> through <code>Ctrl+6</code> (Windows/Linux) or <code>Command+1</code> through <code>Command+6</code> (macOS)<a href="https://support.typora.io/Markdown-Reference/">1</a><a href="https://support.typora.io/Shortcut-Keys/">13</a>.</p><h2><span id="emphasis">Emphasis</span><a href="#emphasis" class="header-anchor">#</a></h2><ul><li><strong>Bold</strong>: Enclose text with double asterisks (<code>**text**</code>) or use <code>Ctrl+B</code> / <code>Command+B</code><a href="https://support.typora.io/Markdown-Reference/">1</a></li><li><em>Italic</em>: Enclose text with single asterisks (<code>*text*</code>) or use <code>Ctrl+I</code> / <code>Command+I</code><a href="https://support.typora.io/Markdown-Reference/">1</a></li><li><del>Strikethrough</del>: Use double tildes (<code>~~text~~</code>) or <code>Alt+Shift+5</code> (Windows) / `Control+Shift+`` (Mac)<a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a></li><li>Underline: Use <code>Ctrl+U</code> / <code>Command+U</code><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a></li></ul><h2><span id="lists">Lists</span><a href="#lists" class="header-anchor">#</a></h2><ul><li><strong>Unordered lists</strong>: Start lines with <code>-</code> or <code>*</code> followed by a space, or use <code>Ctrl+Shift+]</code> / <code>Command+Option+U</code><a href="https://support.typora.io/Markdown-Reference/">1</a><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a></li><li><strong>Ordered lists</strong>: Start lines with numbers followed by a period and space, or use <code>Ctrl+Shift+[</code> / <code>Command+Option+O</code><a href="https://support.typora.io/Markdown-Reference/">1</a><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a></li><li><strong>Task lists</strong>: Create checkboxes with <code>- [ ]</code> (unchecked) or <code>- [x]</code> (checked)<a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a></li></ul><h2><span id="links-and-images">Links and Images</span><a href="#links-and-images" class="header-anchor">#</a></h2><ul><li><strong>Links</strong>: Create with <code>[link text](URL)</code> or use <code>Ctrl+K</code> / <code>Command+K</code><a href="https://support.typora.io/Markdown-Reference/">1</a></li><li><strong>Images</strong>: Insert with <code>![alt text](image-path+Shift+I</code> / <code>Command+Control+I</code><a href="https://support.typora.io/Markdown-Reference/">1</a><ul><li>You can also drag and drop images directly into Typora<a href="https://support.typora.io/Markdown-Reference/">1</a></li></ul></li></ul><h2><span id="blockquotes">Blockquotes</span><a href="#blockquotes" class="header-anchor">#</a></h2><p>Start a line with <code>&gt;</code> followed by a space to create a blockquote, or use <code>Ctrl+Shift+Q</code> / <code>Command+Option+Q</code><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a>.</p><h2><span id="code">Code</span><a href="#code" class="header-anchor">#</a></h2><ul><li><p><strong>Inline code</strong>: Enclose text with backticks (<code>code</code>) or use <code>Ctrl+Shift+`` /</code>Command+Shift+``<a href="https://support.typora.io/Shortcut-Keys/">13</a></p></li><li><p><strong>Code blocks</strong>: Create with triple backticks or use <code>Ctrl+Shift+K</code> / <code>Command+Option+C</code><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></p></li></ul><h2><span id="typora-s-unique-features">Typora’s Unique Features</span><a href="#typora-s-unique-features" class="header-anchor">#</a></h2><h2><span id="live-preview-mode">Live Preview Mode</span><a href="#live-preview-mode" class="header-anchor">#</a></h2><p>Typora’s standout feature is Live Preview, which allows you to see the formatted document as you write. When you place your cursor on or near formatted text, the markdown syntax becomes visible for editing. Once you move the cursor away, the formatting is applied and the syntax disappears<a href="https://support.typoraio.cn/Quick-Start/">3</a><a href="https://www.podfeet.com/blog/2024/06/typora-graeme/">9</a>.</p><p>To toggle between the rendered view and the source code view (showing all Markdown syntax), use:</p><ul><li>Windows/Linux: <code>Ctrl + /</code></li><li>macOS: <code>Command + /</code><a href="https://www.podfeet.com/blog/2024/06/typora-graeme/">9</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></li></ul><h2><span id="focus-mode">Focus Mode</span><a href="#focus-mode" class="header-anchor">#</a></h2><p>Focus Mode dims all text except the paragraph you’re currently editing, helping you concentrate on your writing without distractions<a href="https://www.pakstech.com/blog/typora-review/">8</a><a href="https://hotkeyguru.com/typora-hotkeys/">10</a>.</p><ul><li>Toggle Focus Mode: <code>F8</code><a href="https://hotkeyguru.com/typora-hotkeys/">10</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></li></ul><h2><span id="typewriter-mode">Typewriter Mode</span><a href="#typewriter-mode" class="header-anchor">#</a></h2><p>Typewriter Mode keeps the line you’re currently typing vertically centered on the screen, similar to how a traditional typewriter works<a href="https://www.pakstech.com/blog/typora-review/">8</a><a href="https://hotkeyguru.com/typora-hotkeys/">10</a>.</p><ul><li>Toggle Typewriter Mode: <code>F9</code><a href="https://hotkeyguru.com/typora-hotkeys/">10</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></li></ul><h2><span id="outline-panel">Outline Panel</span><a href="#outline-panel" class="header-anchor">#</a></h2><p>Typora automatically generates an outline based on your document’s headings. Access the outline panel to quickly navigate through your document:</p><ul><li>Windows/Linux: <code>Ctrl + Shift + 1</code></li><li>macOS: <code>Command + Control + 1</code><a href="https://hotkeyguru.com/typora-hotkeys/">10</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></li></ul><h2><span id="keyboard-shortcuts">Keyboard Shortcuts</span><a href="#keyboard-shortcuts" class="header-anchor">#</a></h2><p>Typora offers numerous keyboard shortcuts to streamline your workflow. Here are the most useful ones organized by function:</p><h2><span id="file-operations">File Operations</span><a href="#file-operations" class="header-anchor">#</a></h2><div class="table-container"><table><thead><tr><th>Function</th><th>Windows/Linux</th><th>macOS</th></tr></thead><tbody><tr><td>New File</td><td><code>Ctrl + N</code></td><td><code>Command + N</code></td></tr><tr><td>New Window</td><td><code>Ctrl + Shift + N</code></td><td><code>Command + Shift + N</code></td></tr><tr><td>Open File</td><td><code>Ctrl + O</code></td><td><code>Command + O</code></td></tr><tr><td>Quick Open</td><td><code>Ctrl + P</code></td><td><code>Command + Shift + O</code></td></tr><tr><td>Save</td><td><code>Ctrl + S</code></td><td><code>Command + S</code></td></tr><tr><td>Save As</td><td><code>Ctrl + Shift + S</code></td><td><code>Command + Shift + S</code></td></tr><tr><td>Preferences</td><td><code>Ctrl + ,</code></td><td><code>Command + ,</code></td></tr><tr><td>Close</td><td><code>Ctrl + W</code></td><td><code>Command + W</code></td></tr></tbody></table></div><p><em>Source:<a href="https://support.typora.io/Shortcut-Keys/">13</a></em></p><h2><span id="editing">Editing</span><a href="#editing" class="header-anchor">#</a></h2><div class="table-container"><table><thead><tr><th>Function</th><th>Windows/Linux</th><th>macOS</th></tr></thead><tbody><tr><td>New Paragraph</td><td><code>Enter</code></td><td><code>Enter</code></td></tr><tr><td>New Line</td><td><code>Shift + Enter</code></td><td><code>Shift + Enter</code></td></tr><tr><td>Cut</td><td><code>Ctrl + X</code></td><td><code>Command + X</code></td></tr><tr><td>Copy</td><td><code>Ctrl + C</code></td><td><code>Command + C</code></td></tr><tr><td>Paste</td><td><code>Ctrl + V</code></td><td><code>Command + V</code></td></tr><tr><td>Copy as Markdown</td><td><code>Ctrl + Shift + C</code></td><td><code>Command + Shift + C</code></td></tr><tr><td>Paste as Plain Text</td><td><code>Ctrl + Shift + V</code></td><td><code>Command + Shift + V</code></td></tr><tr><td>Select All</td><td><code>Ctrl + A</code></td><td><code>Command + A</code></td></tr><tr><td>Select Line/Sentence</td><td><code>Ctrl + L</code></td><td><code>Command + L</code></td></tr><tr><td>Delete Line</td><td><code>Ctrl + Shift + Backspace</code></td><td><code>Command + Shift + Backspace</code></td></tr><tr><td>Select Word</td><td><code>Ctrl + D</code></td><td><code>Command + D</code></td></tr><tr><td>Delete Word</td><td><code>Ctrl + Shift + D</code></td><td><code>Command + Shift + D</code></td></tr><tr><td>Find</td><td><code>Ctrl + F</code></td><td><code>Command + F</code></td></tr><tr><td>Replace</td><td><code>Ctrl + H</code></td><td><code>Command + H</code></td></tr></tbody></table></div><p><em>Source:<a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></em></p><h2><span id="formatting">Formatting</span><a href="#formatting" class="header-anchor">#</a></h2><div class="table-container"><table><thead><tr><th>Function</th><th>Windows/Linux</th><th>macOS</th></tr></thead><tbody><tr><td>Heading 1-6</td><td><code>Ctrl + 1-6</code></td><td><code>Command + 1-6</code></td></tr><tr><td>Paragraph</td><td><code>Ctrl + 0</code></td><td><code>Command + 0</code></td></tr><tr><td>Table</td><td><code>Ctrl + T</code></td><td><code>Command + Option + T</code></td></tr><tr><td>Code Fences</td><td><code>Ctrl + Shift + K</code></td><td><code>Command + Option + C</code></td></tr><tr><td>Math Block</td><td><code>Ctrl + Shift + M</code></td><td><code>Command + Option + B</code></td></tr><tr><td>Quote</td><td><code>Ctrl + Shift + Q</code></td><td><code>Command + Option + Q</code></td></tr><tr><td>Ordered List</td><td><code>Ctrl + Shift + [</code></td><td><code>Command + Option + O</code></td></tr><tr><td>Unordered List</td><td><code>Ctrl + Shift + ]</code></td><td><code>Command + Option + U</code></td></tr><tr><td>Bold</td><td><code>Ctrl + B</code></td><td><code>Command + B</code></td></tr><tr><td>Italic</td><td><code>Ctrl + I</code></td><td><code>Command + I</code></td></tr><tr><td>Underline</td><td><code>Ctrl + U</code></td><td><code>Command + U</code></td></tr><tr><td>Code</td><td>`Ctrl + Shift + ``</td><td>`Command + Shift + ``</td></tr><tr><td>Strike</td><td><code>Alt + Shift + 5</code></td><td>`Control + Shift + ``</td></tr><tr><td>Hyperlink</td><td><code>Ctrl + K</code></td><td><code>Command + K</code></td></tr><tr><td>Image</td><td><code>Ctrl + Shift + I</code></td><td><code>Command + Control + I</code></td></tr><tr><td>Clear Format</td><td><code>Ctrl + \</code></td><td><code>Command + \</code></td></tr></tbody></table></div><p><em>Source:<a href="https://hotkeyguru.com/typora-hotkeys/">10</a><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></em></p><h2><span id="view">View</span><a href="#view" class="header-anchor">#</a></h2><div class="table-container"><table><thead><tr><th>Function</th><th>Windows/Linux</th><th>macOS</th></tr></thead><tbody><tr><td>Toggle Sidebar</td><td><code>Ctrl + Shift + L</code></td><td><code>Command + Shift + L</code></td></tr><tr><td>Outline</td><td><code>Ctrl + Shift + 1</code></td><td><code>Command + Control + 1</code></td></tr><tr><td>Articles</td><td><code>Ctrl + Shift + 2</code></td><td><code>Command + Control + 2</code></td></tr><tr><td>File Tree</td><td><code>Ctrl + Shift + 3</code></td><td><code>Command + Control + 3</code></td></tr><tr><td>Source Code Mode</td><td><code>Ctrl + /</code></td><td><code>Command + /</code></td></tr><tr><td>Focus Mode</td><td><code>F8</code></td><td><code>F8</code></td></tr><tr><td>Typewriter Mode</td><td><code>F9</code></td><td><code>F9</code></td></tr><tr><td>Toggle Fullscreen</td><td><code>F11</code></td><td><code>Command + Option + F</code></td></tr><tr><td>Zoom In</td><td><code>Ctrl + Shift + =</code></td><td><em>(Not Supported)</em></td></tr><tr><td>Zoom Out</td><td><code>Ctrl + Shift + -</code></td><td><em>(Not Supported)</em></td></tr><tr><td>Switch Between Docs</td><td><code>Ctrl + Tab</code></td><td>`Command + ``</td></tr></tbody></table></div><p><em>Source:<a href="https://hotkeyguru.com/typora-hotkeys/">10</a><a href="https://support.typora.io/Shortcut-Keys/">13</a></em></p><h2><span id="document-organization">Document Organization</span><a href="#document-organization" class="header-anchor">#</a></h2><h2><span id="using-the-sidebar">Using the Sidebar</span><a href="#using-the-sidebar" class="header-anchor">#</a></h2><p>Typora’s sidebar provides easy access to your folders and files. Toggle the sidebar with <code>Ctrl + Shift + L</code> (Windows/Linux) or <code>Command + Shift + L</code> (macOS)<a href="https://support.typora.io/Shortcut-Keys/">13</a><a href="https://www.linkedin.com/pulse/typora-comprehensive-tool-technical-writers-techdocs-llc-zlkqe">22</a>.</p><p>The sidebar offers three views:</p><ol><li><strong>Outline</strong> (<code>Ctrl + Shift + 1</code> / <code>Command + Control + 1</code>): Shows the structure of your current document based on headings</li><li><strong>Articles</strong> (<code>Ctrl + Shift + 2</code> / <code>Command + Control + 2</code>): Shows all open documents</li><li><strong>File Tree</strong> (<code>Ctrl + Shift + 3</code> / <code>Command + Control + 3</code>): Shows your folder structure<a href="https://support.typora.io/Shortcut-Keys/">13</a></li></ol><h2><span id="creating-an-efficient-folder-structure">Creating an Efficient Folder Structure</span><a href="#creating-an-efficient-folder-structure" class="header-anchor">#</a></h2><p>To create a well-organized file structure in Typora:</p><ol><li>Open the sidebar and click “Open Folder” at the bottom</li><li>Select or create a main folder for your Typora documents</li><li>Right-click on the folder to create subfolders (by year, project, or category)</li><li>Right-click on any folder to create new files23</li></ol><p><strong>Best Practices for Folder Structure:</strong></p><ul><li>Create a logical hierarchy (e.g., Project → Year → Month → Documents)</li><li>Use clear, consistent naming conventions (e.g., YYYYMMDD_ProjectName)</li><li>Keep folder structures relatively shallow to avoid complexity</li><li>Consider separating work by project type or category<a href="https://efficientcontentcreatoracademy.com/post/folder-structure-best-practices-examples-organize-your-files-and-folder-101">21</a></li></ul><h2><span id="file-naming-conventions">File Naming Conventions</span><a href="#file-naming-conventions" class="header-anchor">#</a></h2><p>For optimal organization:</p><ul><li>Use consistent date formats (YYYYMMDD) at the beginning of filenames for chronological sorting</li><li>Avoid spaces in filenames (use underscores or hyphens instead)</li><li>Include descriptive keywords in filenames</li><li>Use consistent capitalization<a href="https://efficientcontentcreatoracademy.com/post/folder-structure-best-practices-examples-organize-your-files-and-folder-101">21</a></li></ul><h2><span id="quick-file-access">Quick File Access</span><a href="#quick-file-access" class="header-anchor">#</a></h2><p>Use <code>Ctrl + P</code> (Windows/Linux) or <code>Command + Shift + O</code> (macOS) to quickly open files with the “Open Quickly” feature, which searches across all your files in open folders<a href="https://support.typoraio.cn/Quick-Start/">3</a><a href="https://support.typora.io/Shortcut-Keys/">13</a>.</p><h2><span id="themes-and-customization">Themes and Customization</span><a href="#themes-and-customization" class="header-anchor">#</a></h2><p>Typora offers extensive customization options through themes and CSS modifications.</p><h2><span id="built-in-themes">Built-in Themes</span><a href="#built-in-themes" class="header-anchor">#</a></h2><p>Typora comes with 6 built-in themes that you can select from the “Themes” menu. You can set different themes for light and dark modes on supported systems<a href="https://support.typora.io/About-Themes/">17</a>.</p><h2><span id="installing-custom-themes">Installing Custom Themes</span><a href="#installing-custom-themes" class="header-anchor">#</a></h2><p>To install a custom theme:</p><ol><li>Go to <strong>Preferences</strong> → <strong>Appearance</strong> → <strong>Open Theme Folder</strong></li><li>Download a theme from the <a href="http://theme.typora.io/">Typora Theme Gallery</a> or other sources</li><li>Extract the theme files (if in a ZIP) and copy the CSS file and any related resource folders to the theme folder</li><li>Restart Typora and select the new theme from the Themes menu16<a href="https://support.typora.io/About-Themes/">17</a><a href="https://github.com/YiNNx/typora-theme-lapis">19</a></li></ol><h2><span id="creating-custom-css-modifications">Creating Custom CSS Modifications</span><a href="#creating-custom-css-modifications" class="header-anchor">#</a></h2><p>Instead of modifying theme files directly, you can create CSS override files:</p><ol><li>Go to the theme folder as described above</li><li>Create one of these files:<ul><li><code>base.user.css</code> - Applied to all themes</li><li><code>[theme-name].user.css</code> - Applied only to a specific theme<a href="https://support.typora.io/Add-Custom-CSS/">18</a></li></ul></li></ol><p><strong>Example for Custom Font:</strong></p><p>To change the font for all themes, create <code>base.user.css</code> with:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">css<br>body &#123;<br>  font-family: &quot;Your Preferred Font&quot;, sans-serif;<br>&#125;<br></code></pre></td></tr></table></figure><p>For more advanced customization, you can use the developer tools:</p><ul><li>Windows/Linux: Toggle DevTools with <code>Shift + F12</code></li><li>macOS: Enable Debug from the Help menu, then right-click and select “Inspect Elements”<a href="https://support.typora.io/Add-Custom-CSS/">18</a></li></ul><h2><span id="export-and-compilation">Export and Compilation</span><a href="#export-and-compilation" class="header-anchor">#</a></h2><p>Typora offers various options for exporting your Markdown documents to other formats.</p><h2><span id="export-options">Export Options</span><a href="#export-options" class="header-anchor">#</a></h2><p>Access export options from <strong>File</strong> → <strong>Export</strong>:</p><ul><li><strong>PDF</strong>: Creates a PDF document with customizable page settings</li><li><strong>HTML</strong>: Exports as a single HTML file with styling</li><li><strong>Word (.docx)</strong>: Converts to Microsoft Word format</li><li><strong>OpenOffice (.odt)</strong>: Exports to OpenDocument Text format</li><li><strong>RTF</strong>: Creates Rich Text Format documents</li><li><strong>Epub</strong>: Generates e-book format</li><li><strong>LaTeX</strong>: Exports to LaTeX format</li><li><strong>Image</strong>: Converts the document to an image</li><li><strong>HTML (without styles)</strong>: Creates clean HTML without CSS</li><li><strong>Markdown</strong>: Converts to other Markdown variants<a href="https://www.markdownguide.org/tools/typora/">5</a><a href="https://support.typora.io/Markdown-Export/">15</a></li></ul><h2><span id="using-pandoc-for-advanced-export">Using Pandoc for Advanced Export</span><a href="#using-pandoc-for-advanced-export" class="header-anchor">#</a></h2><p>For formats like Word, LaTeX, and others, Typora uses Pandoc, which must be installed separately<a href="https://support.typora.io/Markdown-Export/">15</a>.</p><p>To install Pandoc:</p><ol><li>Download from <a href="https://pandoc.org/installing.html">pandoc.org</a></li><li>Install according to your operating system’s instructions</li><li>Typora should automatically detect the Pandoc installation</li></ol><h2><span id="customizing-export-settings">Customizing Export Settings</span><a href="#customizing-export-settings" class="header-anchor">#</a></h2><p>For PDF export, you can customize:</p><ul><li>Paper size and margins</li><li>Page headers and footers</li><li>Table of contents inclusion</li><li>Page breaks before headings</li><li>Font settings and line spacing<a href="https://support.typora.io/Markdown-Export/">15</a></li></ul><h2><span id="markdown-export-and-reformatting">Markdown Export and Reformatting</span><a href="#markdown-export-and-reformatting" class="header-anchor">#</a></h2><p>When exporting to different Markdown variants, you can customize:</p><ul><li>Line width (column limit)</li><li>Line endings (CRLF or LF)</li><li>Tab width</li><li>Character encoding<a href="https://support.typora.io/Markdown-Export/">15</a></li></ul><p>For reformatting your Markdown:</p><ol><li>Create an export profile under <strong>Export</strong> → <strong>Markdown (other spec)</strong></li><li>Select desired options like line width and text wrapping</li><li>Use this to reformat your document while maintaining content<a href="https://support.typora.io/Markdown-Export/">15</a></li></ol><h2><span id="advanced-features">Advanced Features</span><a href="#advanced-features" class="header-anchor">#</a></h2><h2><span id="math-expressions">Math Expressions</span><a href="#math-expressions" class="header-anchor">#</a></h2><p>Typora supports mathematical expressions using LaTeX syntax:</p><ul><li><strong>Inline Math</strong>: Enclose with single dollar signs <script type="math/tex">E=mc^2</script></li><li><strong>Math Blocks</strong>: Create with double dollar signs or use <code>Ctrl + Shift + M</code> / <code>Command + Option + B</code><a href="https://support.typora.io/Markdown-Reference/">1</a><a href="https://ldx123000.com/en/p/common-shortcuts-in-typora/">11</a></li></ul><p>Example of a math block:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">text<br>$$<br>\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; <br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$$<br></code></pre></td></tr></table></figure><h2><span id="diagrams">Diagrams</span><a href="#diagrams" class="header-anchor">#</a></h2><p>Typora supports various diagram types through external libraries like Mermaid for flowcharts, sequence diagrams, and Gantt charts<a href="https://www.pakstech.com/blog/typora-review/">8</a><a href="https://www.toolify.ai/ai-news/master-the-secrets-of-markdown-with-typora-194352">14</a>.</p>]]></content>
      
      
      <categories>
          
          <category> guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Guide</title>
      <link href="/2025/03/24/markdown-notes/"/>
      <url>/2025/03/24/markdown-notes/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#the-complete-markdown-tutorial">The Complete Markdown Tutorial</a><ul><li><a href="#what-is-markdown">What is Markdown?</a></li><li><a href="#why-use-markdown">Why Use Markdown?</a></li><li><a href="#basic-syntax">Basic Syntax</a><ul><li><a href="#headings">Headings</a></li><li><a href="#text-formatting">Text Formatting</a><ul><li><a href="#bold">Bold</a></li><li><a href="#italic">Italic</a></li><li><a href="#bold-and-italic">Bold and Italic</a></li><li><a href="#strikethrough">Strikethrough</a></li></ul></li><li><a href="#lists">Lists</a><ul><li><a href="#unordered-lists">Unordered Lists</a></li><li><a href="#ordered-lists">Ordered Lists</a></li><li><a href="#nested-lists">Nested Lists</a></li></ul></li><li><a href="#links">Links</a><ul><li><a href="#links-with-titles">Links with Titles</a></li></ul></li><li><a href="#images">Images</a></li><li><a href="#blockquotes">Blockquotes</a><ul><li><a href="#nested-blockquotes">Nested Blockquotes</a></li></ul></li><li><a href="#code">Code</a><ul><li><a href="#inline-code">Inline Code</a></li><li><a href="#code-blocks">Code Blocks</a></li></ul></li><li><a href="#horizontal-rules">Horizontal Rules</a></li></ul></li><li><a href="#extended-syntax">Extended Syntax</a><ul><li><a href="#tables">Tables</a><ul><li><a href="#alignment">Alignment</a></li></ul></li><li><a href="#real-life-examples">Real life examples</a></li><li><a href="#footnotes">Footnotes</a></li><li><a href="#definition-lists">Definition Lists</a></li><li><a href="#emoji">Emoji</a></li><li><a href="#highlight">Highlight</a></li><li><a href="#subscript-and-superscript">Subscript and Superscript</a></li></ul></li><li><a href="#markdown-applications">Markdown Applications</a><ul><li><a href="#text-editors-and-ides">Text Editors and IDEs</a></li><li><a href="#dedicated-markdown-editors">Dedicated Markdown Editors</a></li><li><a href="#note-taking-applications">Note-Taking Applications</a></li><li><a href="#online-markdown-editors">Online Markdown Editors</a></li></ul></li><li><a href="#markdown-flavors">Markdown Flavors</a></li><li><a href="#tips-for-working-with-markdown">Tips for Working with Markdown</a><ul><li><a href="#escaping-characters">Escaping Characters</a></li><li><a href="#combining-html-with-markdown">Combining HTML with Markdown</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="the-complete-markdown-tutorial">The Complete Markdown Tutorial</span><a href="#the-complete-markdown-tutorial" class="header-anchor">#</a></h1><h2><span id="what-is-markdown">What is Markdown?</span><a href="#what-is-markdown" class="header-anchor">#</a></h2><p>Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. </p><h2><span id="why-use-markdown">Why Use Markdown?</span><a href="#why-use-markdown" class="header-anchor">#</a></h2><p>There are several compelling reasons to use Markdown:</p><ul><li><p><strong>One of possibility</strong> of necessity but powerful enough to out compete other competitors (Or historical legacies)</p></li><li><p>[Why does a exhausting-posibility language exists]: futureLinks</p></li></ul><h2><span id="basic-syntax">Basic Syntax</span><a href="#basic-syntax" class="header-anchor">#</a></h2><h3><span id="headings">Headings</span><a href="#headings" class="header-anchor">#</a></h3><p>Headings are created by adding number signs (<code>#</code>) before your heading text. The number of <code>#</code> symbols indicates the heading level:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Heading Level 1</span><br><span class="hljs-section">## Heading Level 2</span><br><span class="hljs-section">### Heading Level 3</span><br><span class="hljs-section">#### Heading Level 4</span><br><span class="hljs-section">##### Heading Level 5</span><br><span class="hljs-section">###### Heading Level 6</span><br></code></pre></td></tr></table></figure><p><strong>Note</strong>: Don’t forget to add a space between the <code>#</code> and your text!</p><h3><span id="text-formatting">Text Formatting</span><a href="#text-formatting" class="header-anchor">#</a></h3><h4><span id="bold">Bold</span><a href="#bold" class="header-anchor">#</a></h4><p>To make text bold, add two asterisks or underscores before and after the text:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**This text is bold**</span><br><span class="hljs-strong">__This text is also bold__</span><br></code></pre></td></tr></table></figure><h4><span id="italic">Italic</span><a href="#italic" class="header-anchor">#</a></h4><p>For italic text, use a single asterisk or underscore:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*This text is italic*</span><br><span class="hljs-emphasis">_This text is also italic_</span><br></code></pre></td></tr></table></figure><h4><span id="bold-and-italic">Bold and Italic</span><a href="#bold-and-italic" class="header-anchor">#</a></h4><p>To make text both bold and italic, use three asterisks or underscores:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*This text is bold and italic*</span>**</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_This text is also bold and italic_</span>__</span><br></code></pre></td></tr></table></figure><h4><span id="strikethrough">Strikethrough</span><a href="#strikethrough" class="header-anchor">#</a></h4><p>To strike through text, use two tildes:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">~~Strikethrough text~~<br></code></pre></td></tr></table></figure><h3><span id="lists">Lists</span><a href="#lists" class="header-anchor">#</a></h3><h4><span id="unordered-lists">Unordered Lists</span><a href="#unordered-lists" class="header-anchor">#</a></h4><p>Create unordered lists using asterisks, plus signs, or hyphens:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> First item<br><span class="hljs-bullet">-</span> Second item<br><span class="hljs-bullet">-</span> Third item<br><br><span class="hljs-bullet">*</span> First item<br><span class="hljs-bullet">*</span> Second item<br><span class="hljs-bullet">*</span> Third item<br><br><span class="hljs-bullet">+</span> First item<br><span class="hljs-bullet">+</span> Second item<br><span class="hljs-bullet">+</span> Third item<br></code></pre></td></tr></table></figure><p><strong>Note</strong>: Don’t forget to add a space after the list marker!</p><h4><span id="ordered-lists">Ordered Lists</span><a href="#ordered-lists" class="header-anchor">#</a></h4><p>For ordered lists, use numbers followed by periods:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> First item<br><span class="hljs-bullet">2.</span> Second item<br><span class="hljs-bullet">3.</span> Third item<br></code></pre></td></tr></table></figure><p>You can also use just the number 1 for all items, and Markdown will automatically number them correctly:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> First item<br><span class="hljs-bullet">1.</span> Second item<br><span class="hljs-bullet">1.</span> Third item<br></code></pre></td></tr></table></figure><h4><span id="nested-lists">Nested Lists</span><a href="#nested-lists" class="header-anchor">#</a></h4><p>Create nested lists by indenting items:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> First level<br><span class="hljs-bullet">  -</span> Second level<br><span class="hljs-bullet">    -</span> Third level<br></code></pre></td></tr></table></figure><h3><span id="links">Links</span><a href="#links" class="header-anchor">#</a></h3><p>Create links by wrapping the link text in brackets and the URL in parentheses:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Visit Markdown Guide</span>](<span class="hljs-link">https://www.markdownguide.org</span>)<br></code></pre></td></tr></table></figure><p>To display the URL itself, you can simply write it out or wrap it in angle brackets:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">https://www.markdownguide.org<br><br></code></pre></td></tr></table></figure><h4><span id="links-with-titles">Links with Titles</span><a href="#links-with-titles" class="header-anchor">#</a></h4><p>Add a title (tooltip) to your link by adding a title attribute in quotes:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Visit Markdown Guide</span>](<span class="hljs-link">https://www.markdownguide.org &quot;The Comprehensive Markdown Guide&quot;</span>)<br></code></pre></td></tr></table></figure><h3><span id="images">Images</span><a href="#images" class="header-anchor">#</a></h3><p>Insert images with an exclamation mark, followed by alt text in brackets, and the image path in parentheses:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">Alt text for the image</span>](<span class="hljs-link">path/to/image.jpg</span>)<br></code></pre></td></tr></table></figure><p>You can also add a title to the image:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">Alt text</span>](<span class="hljs-link">path/to/image.jpg &quot;Image title&quot;</span>)<br></code></pre></td></tr></table></figure><h3><span id="blockquotes">Blockquotes</span><a href="#blockquotes" class="header-anchor">#</a></h3><p>Create blockquotes with the greater-than symbol:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; This is a blockquote.</span><br></code></pre></td></tr></table></figure><h4><span id="nested-blockquotes">Nested Blockquotes</span><a href="#nested-blockquotes" class="header-anchor">#</a></h4><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; Outer blockquote</span><br>&gt;&gt; Nested blockquote<br></code></pre></td></tr></table></figure><h3><span id="code">Code</span><a href="#code" class="header-anchor">#</a></h3><h4><span id="inline-code">Inline Code</span><a href="#inline-code" class="header-anchor">#</a></h4><p>For inline code, wrap the text in backticks:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">Use the <span class="hljs-code">`print()`</span> function in Python.<br></code></pre></td></tr></table></figure><h4><span id="code-blocks">Code Blocks</span><a href="#code-blocks" class="header-anchor">#</a></h4><p>Create code blocks by indenting text with four spaces or a tab:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># This is a code block<br>print(&quot;Hello, world!&quot;)<br></code></pre></td></tr></table></figure><h3><span id="horizontal-rules">Horizontal Rules</span><a href="#horizontal-rules" class="header-anchor">#</a></h3><p>Create horizontal rules with three or more asterisks, hyphens, or underscores:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">---</span></span><br><span class="hljs-strong"><span class="hljs-section">__<span class="hljs-emphasis">_</span></span></span><br></code></pre></td></tr></table></figure><h2><span id="extended-syntax">Extended Syntax</span><a href="#extended-syntax" class="header-anchor">#</a></h2><p>These elements extend Markdown’s capabilities but may not be supported by all applications.</p><h3><span id="tables">Tables</span><a href="#tables" class="header-anchor">#</a></h3><p>Create tables using pipes and hyphens:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">| Header 1 | Header 2 |<br>| -------- | -------- |<br>| Cell 1   | Cell 2   |<br>| Cell 3   | Cell 4   |<br></code></pre></td></tr></table></figure><h4><span id="alignment">Alignment</span><a href="#alignment" class="header-anchor">#</a></h4><p>Control column alignment with colons:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">| Left-aligned | Centered | Right-aligned |<br>| :----------- | :------: | ------------: |<br>| Left         | Center   | Right         |<br></code></pre></td></tr></table></figure><h3><span id="real-life-examples">Real life examples</span><a href="#real-life-examples" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs `markdown">```<br>Code block without syntax highlighting<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Code block with syntax highlighting<br>def hello_world():<br>    print(&quot;Hello, world!&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br>### Task Lists<br><br>Create task lists with brackets and spaces for unchecked items, or `x` for checked items:<br><br>```markdown<br>- [x] Completed task<br>- [ ] Incomplete task<br></code></pre></td></tr></table></figure><h3><span id="footnotes">Footnotes</span><a href="#footnotes" class="header-anchor">#</a></h3><p>Add footnotes with a caret and identifier in brackets, then define the footnote later:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">Here&#x27;s a sentence with a footnote.[^1]<br><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">This is the footnote content.</span><br></code></pre></td></tr></table></figure><h3><span id="definition-lists">Definition Lists</span><a href="#definition-lists" class="header-anchor">#</a></h3><p>Some Markdown implementations support definition lists:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">term<br>: definition<br></code></pre></td></tr></table></figure><h3><span id="emoji">Emoji</span><a href="#emoji" class="header-anchor">#</a></h3><p>Some Markdown applications support emoji shortcodes:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">That is so funny! :joy:<br></code></pre></td></tr></table></figure><h3><span id="highlight">Highlight</span><a href="#highlight" class="header-anchor">#</a></h3><p>Some Markdown implementations support text highlighting:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">==highlighted text==<br></code></pre></td></tr></table></figure><h3><span id="subscript-and-superscript">Subscript and Superscript</span><a href="#subscript-and-superscript" class="header-anchor">#</a></h3><p>Some Markdown implementations support subscript and superscript:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">H~2~O (subscript)<br>X^2^ (superscript)<br></code></pre></td></tr></table></figure><h2><span id="markdown-applications">Markdown Applications</span><a href="#markdown-applications" class="header-anchor">#</a></h2><p>There are numerous applications that support Markdown:</p><h3><span id="text-editors-and-ides">Text Editors and IDEs</span><a href="#text-editors-and-ides" class="header-anchor">#</a></h3><ul><li>Visual Studio Code</li><li>Atom</li><li>Sublime Text</li><li>Vim/Neovim</li></ul><h3><span id="dedicated-markdown-editors">Dedicated Markdown Editors</span><a href="#dedicated-markdown-editors" class="header-anchor">#</a></h3><ul><li>Typora</li><li>Obsidian</li><li>iA Writer</li><li>Markdown Monster</li></ul><h3><span id="note-taking-applications">Note-Taking Applications</span><a href="#note-taking-applications" class="header-anchor">#</a></h3><ul><li>Joplin</li><li>Notion</li><li>Bear</li><li>Obsidian</li></ul><h3><span id="online-markdown-editors">Online Markdown Editors</span><a href="#online-markdown-editors" class="header-anchor">#</a></h3><ul><li>Dillinger</li><li>StackEdit</li><li>HackMD</li><li>Markdown Live Preview</li></ul><h2><span id="markdown-flavors">Markdown Flavors</span><a href="#markdown-flavors" class="header-anchor">#</a></h2><p>Different applications implement slightly different versions of Markdown, known as “flavors”.[5] Some common flavors include:</p><ul><li><strong>CommonMark</strong>: A standardized specification of Markdown</li><li><strong>GitHub Flavored Markdown</strong>: Used on GitHub, adds features like tables and task lists</li><li><strong>MultiMarkdown</strong>: Adds support for tables, footnotes, and more</li><li><strong>Markdown Extra</strong>: Adds features like tables, fenced code blocks, and definition lists</li></ul><h2><span id="tips-for-working-with-markdown">Tips for Working with Markdown</span><a href="#tips-for-working-with-markdown" class="header-anchor">#</a></h2><h3><span id="escaping-characters">Escaping Characters</span><a href="#escaping-characters" class="header-anchor">#</a></h3><p>If you want to display a character that is normally used for Markdown formatting, you can escape it with a backslash:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*This text will have asterisks and not be italic\*</span><br></code></pre></td></tr></table></figure><h3><span id="combining-html-with-markdown">Combining HTML with Markdown</span><a href="#combining-html-with-markdown" class="header-anchor">#</a></h3><p>Most Markdown processors allow you to use HTML within your Markdown documents:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">This is a regular paragraph.<br><br><br>  <br><span class="hljs-code">    HTML table</span><br><span class="hljs-code">    in Markdown</span><br><span class="hljs-code">  </span><br><span class="hljs-code"></span><br><br>Back to Markdown.<br></code></pre></td></tr></table></figure><p>Note that within HTML blocks, Markdown formatting is not processed.[2]</p>]]></content>
      
      
      <categories>
          
          <category> guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website Debug Methodology</title>
      <link href="/2025/03/24/Website-debug-methodology/"/>
      <url>/2025/03/24/Website-debug-methodology/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#debugging-techniques-for-hexo-related-web-applications">Debugging techniques for Hexo / related web applications</a><ul><li><a href="#basic-procedures">Basic procedures</a><ul><li><a href="#1-check-the-terminal-to-see-the-possible-mistakes">1. Check the terminal to see the possible mistakes.</a></li><li><a href="#2-check-the-console-for-any-errors-warnings-or-failures">2. Check the console for any errors, warnings, or failures.</a></li><li><a href="#3-carefully-observe-the-current-web-page-following-the-rendering-process">3. Carefully observe the current web page following the rendering process:</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="debugging-techniques-for-hexo-related-web-applications">Debugging techniques for Hexo / related web applications</span><a href="#debugging-techniques-for-hexo-related-web-applications" class="header-anchor">#</a></h1><h2><span id="basic-procedures">Basic procedures</span><a href="#basic-procedures" class="header-anchor">#</a></h2><h3><span id="1-check-the-terminal-to-see-the-possible-mistakes">1. Check the terminal to see the possible mistakes.</span><a href="#1-check-the-terminal-to-see-the-possible-mistakes" class="header-anchor">#</a></h3><h3><span id="2-check-the-console-for-any-errors-warnings-or-failures">2. Check the console for any errors, warnings, or failures.</span><a href="#2-check-the-console-for-any-errors-warnings-or-failures" class="header-anchor">#</a></h3><h3><span id="3-carefully-observe-the-current-web-page-following-the-rendering-process">3. Carefully observe the current web page following the rendering process:</span><a href="#3-carefully-observe-the-current-web-page-following-the-rendering-process" class="header-anchor">#</a></h3>   <pre class="mermaid">   %%{init: {'theme': 'neutral'}}%%   graph TD       %% Server Side       S1[Receive HTTP Request] --> S2[Process Request]       S2 --> S3[Generate HTML]       S3 --> S4[Fetch CSS/JS/Assets]       S4 --> S5[Send HTTP Response]       style S1 fill:#C8E6C9       style S2 fill:#C8E6C9       style S3 fill:#C8E6C9       style S4 fill:#C8E6C9       style S5 fill:#C8E6C9       %% Client Side       A[User Enters URL] --> B[Send HTTP Request]       B --> S1       S5 --> C[Receive HTML/CSS/JS]       C --> D[HTML Parsing]       D --> E[Tokenization]       E --> F[DOM Tree Construction]       F --> G[DOM Node Creation]       G --> N[DOM Ready]       C --> H[CSS/JS Download]       H --> I[CSSOM Construction]       I --> J[Style Calculation]       J --> O[CSSOM Ready]       H --> K[JS Execution]       K --> L{DOM/CSSOM Modified?}       L -->|Yes| D       L -->|No| M[Continue]       N --> P[Render Tree]       O --> P       P --> Q[Layout/Reflow]       Q --> R[Layer Compositing]       R --> S[Paint]       S --> T[GPU Rasterization]       T --> U[Display Pixels on Screen]       style A fill:#B3E5FC       style B fill:#B3E5FC       style C fill:#B3E5FC       style D fill:#B3E5FC       style E fill:#B3E5FC       style F fill:#B3E5FC       style G fill:#B3E5FC       style H fill:#B3E5FC       style I fill:#B3E5FC       style J fill:#B3E5FC       style K fill:#B3E5FC       style L fill:#B3E5FC       style M fill:#B3E5FC       style N fill:#B3E5FC       style O fill:#B3E5FC       style P fill:#B3E5FC       style Q fill:#B3E5FC       style R fill:#B3E5FC       style S fill:#B3E5FC       style T fill:#B3E5FC       style U fill:#81D4FA,stroke:#01579B</pre><p>   <strong><em>Identify</em> the process which possibly goes wrong and then check the corresponding function</strong>. </p><p>   Note! This step makes sure the rendering of the virtual server on the local machine is working well. If the issue persists, we have to dig into the deployment process.</p><ol><li><p>Check the deployment process files: </p><pre class="mermaid">   %%{init: {'theme': 'neutral'}}%%graph TD    A[Project Size] -->B[Snowpack + esbuild]    A --> C[Snowpack + Webpack Plugin]    C --> D[Enable Code Splitting]    D --> E[Configure Caching]    E --> F[CI/CD Integration]</pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> methodologies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web development </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
